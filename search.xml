<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>DS_exp2</title>
      <link href="/2018/11/10/DS-exp2/"/>
      <url>/2018/11/10/DS-exp2/</url>
      
        <content type="html"><![CDATA[<h3 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h3><a id="more"></a><h4 id="图编号"><a href="#图编号" class="headerlink" title="图编号"></a>图编号</h4><p><img src="/2018/11/10/DS-exp2/graph.png" alt="图编号"><br>如图所示，从上到下，从左到右，给17个顶点进行编号，以两个顶点代表一条边，例入2-3代表可以从顶点2走到顶点3。问题即为求解从2 -&gt; 17的通路。</p><h4 id="求解思想"><a href="#求解思想" class="headerlink" title="求解思想"></a>求解思想</h4><p>求解一条通路，应当从起点出发，不断前进到后续可行顶点，当在一个顶点无法继续前进时，则回退到上一个顶点，寻找其他可行顶点，直到到达终点。此思想符合数据结构栈的特点。首先将起点压栈，然后将从当前顶点可到达的一个顶点压栈，然后将该顶点标记为已访问，随后到达下一个顶点，在某个顶点无法继续走通时，将当前顶点出栈，回退到上一个顶点重新选择可以到达的且未访问的顶点。如此循环，直到终点被压入栈中，此时栈中所有顶点即为一条通路。</p><p>求解一条最短路径，应当从起点出发，访问所有可以到达的下一级顶点。再从所有下一级顶点出发，访问所有可访问的再下一级顶点，如此循环，每一级顶点距起点距离相同。过程中记录路线。此想法符合数据结构中队列的特点。首先，将起点入队。然后将队头元素出队，将该元素可访问到的且未被访问的顶点置为已访问，然后入队，注意记录被入队节点的前一个节点。直到队列为空。最后顺着终点的前驱顶点输出即可得到路线。若有多个终点，要寻找到最近的终点出去，则将结束循环条件改为有终点入队即可。</p><h3 id="代码说明"><a href="#代码说明" class="headerlink" title="代码说明"></a>代码说明</h3><h4 id="结构体及全局变量定义"><a href="#结构体及全局变量定义" class="headerlink" title="结构体及全局变量定义"></a>结构体及全局变量定义</h4><figure class="hljs highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">p</span>    //表示顶点,用于寻找最短路径时记录路径<br>&#123;</span><br>    <span class="hljs-keyword">int</span> code;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">p</span>* <span class="hljs-title">pre</span>;</span>  <span class="hljs-comment">//前一个顶点</span><br>&#125; Ver;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> edge_cnt = <span class="hljs-number">29</span>;    <span class="hljs-comment">//边的数量</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> ver_cnt = <span class="hljs-number">17</span>;     <span class="hljs-comment">//顶点数量</span><br><span class="hljs-keyword">int</span> <span class="hljs-built_in">map</span>[edge_cnt][<span class="hljs-number">2</span>];       <span class="hljs-comment">//记录边</span><br><span class="hljs-keyword">int</span> my_stack[MAX] = &#123;<span class="hljs-number">0</span>&#125;;    <span class="hljs-comment">//数组模拟栈</span><br><span class="hljs-keyword">int</span> my_quque[MAX] = &#123;<span class="hljs-number">0</span>&#125;;    <span class="hljs-comment">//数组模拟队列</span><br><span class="hljs-keyword">int</span> top = <span class="hljs-number">0</span>;                <span class="hljs-comment">//栈顶指示</span><br><span class="hljs-keyword">int</span> front = <span class="hljs-number">0</span>, rear = <span class="hljs-number">0</span>;    <span class="hljs-comment">//队列首位指示</span><br><span class="hljs-keyword">bool</span> visit[ver_cnt + <span class="hljs-number">1</span>] = &#123;<span class="hljs-literal">false</span>&#125;;  <span class="hljs-comment">//记录点是否访问过</span><br>Ver vers[ver_cnt + <span class="hljs-number">1</span>];              <span class="hljs-comment">//每个点路径链表头结点</span><br></code></pre></td></tr></table></figure><h4 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h4><figure class="hljs highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">loadmaze</span><span class="hljs-params">()</span></span>;            <span class="hljs-comment">//读入迷宫地图</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">visited</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span></span>;        <span class="hljs-comment">//将点i状态置为访问过</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">isvisited</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span></span>;      <span class="hljs-comment">//判断点i是否访问过</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">hasway</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s)</span></span>;         <span class="hljs-comment">//从点s出发是否有没去过的可行路径</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">find_way</span><span class="hljs-params">(<span class="hljs-keyword">int</span> start, <span class="hljs-keyword">int</span> end)</span></span>;      <span class="hljs-comment">//找到一条通路</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">find_least</span><span class="hljs-params">(<span class="hljs-keyword">int</span> start, <span class="hljs-keyword">int</span> end)</span></span>;    <span class="hljs-comment">//找到一条最短路径</span><br></code></pre></td></tr></table></figure><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><p><img src="/2018/11/10/DS-exp2/ret.png" alt="运行结果"></p><h3 id="实验总结"><a href="#实验总结" class="headerlink" title="实验总结"></a>实验总结</h3><p>本次实验，求解迷宫通路和最短通路，在不利用递归的情况下，使用模拟的栈和队列，实现了深度优先搜索和广度优先搜索。加强了对于栈和队列的理解以及使用熟练度。</p>]]></content>
      
      
      <categories>
          
          <category> DataStructure </category>
          
          <category> Cpp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Stack </tag>
            
            <tag> Queue </tag>
            
            <tag> 迷宫问题 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Bomb_lab</title>
      <link href="/2018/11/09/Bomb_lab/"/>
      <url>/2018/11/09/Bomb_lab/</url>
      
        <content type="html"><![CDATA[<h3 id="phase-5"><a href="#phase-5" class="headerlink" title="phase_5"></a>phase_5</h3><a id="more"></a><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">disas phase_5<br></code></pre></td></tr></table></figure><p>生成下面的汇编代码，可见，需要读入一个长度为6的字符串<br><figure class="hljs highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-number">0</span>x0000000000401062 <span class="hljs-variable">&lt;+0&gt;</span>:     push   %rbx<br><span class="hljs-number">0</span>x0000000000401063 <span class="hljs-variable">&lt;+1&gt;</span>:     sub    <span class="hljs-variable">$0x20</span>,%rsp<br><span class="hljs-number">0</span>x0000000000401067 <span class="hljs-variable">&lt;+5&gt;</span>:     mov    %rdi,%rbx<br><span class="hljs-number">0</span>x000000000040106a <span class="hljs-variable">&lt;+8&gt;</span>:     mov    %fs:<span class="hljs-number">0</span>x28,%rax<br><span class="hljs-number">0</span>x0000000000401073 <span class="hljs-variable">&lt;+17&gt;</span>:    mov    %rax,<span class="hljs-number">0</span>x18(%rsp)<br><span class="hljs-number">0</span>x0000000000401078 <span class="hljs-variable">&lt;+22&gt;</span>:    xor    %eax,%eax<br><span class="hljs-number">0</span>x000000000040107a <span class="hljs-variable">&lt;+24&gt;</span>:    callq  <span class="hljs-number">0</span>x40131b <span class="hljs-variable">&lt;string_length&gt;</span><br><span class="hljs-number">0</span>x000000000040107f <span class="hljs-variable">&lt;+29&gt;</span>:    cmp    <span class="hljs-variable">$0x6</span>,%eax<br><span class="hljs-number">0</span>x0000000000401082 <span class="hljs-variable">&lt;+32&gt;</span>:    je     <span class="hljs-number">0</span>x4010d2 <span class="hljs-variable">&lt;phase_5+112&gt;</span><br><span class="hljs-number">0</span>x0000000000401084 <span class="hljs-variable">&lt;+34&gt;</span>:    callq  <span class="hljs-number">0</span>x40143a <span class="hljs-variable">&lt;explode_bomb&gt;</span><br></code></pre></td></tr></table></figure></p><p>从下面这段，是一个循环，对输入字符串进行一个变换，得到s.其变换为是<code>s[i] = p[input[i] &amp; 0xf]</code>，p是程序内含的一个模式串.<br><figure class="hljs highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-number">0x000000000040108b</span> &lt;+<span class="hljs-number">41</span>&gt;:    movzbl (%rbx,%rax,<span class="hljs-number">1</span>),%ecx<br><span class="hljs-number">0x000000000040108f</span> &lt;+<span class="hljs-number">45</span>&gt;:    mov    %cl,(%rsp)<br><span class="hljs-number">0x0000000000401092</span> &lt;+<span class="hljs-number">48</span>&gt;:    mov    (%rsp),%rdx<br><span class="hljs-number">0x0000000000401096</span> &lt;+<span class="hljs-number">52</span>&gt;:    <span class="hljs-keyword">and</span>    $0xf,%edx<br><span class="hljs-number">0x0000000000401099</span> &lt;+<span class="hljs-number">55</span>&gt;:    movzbl <span class="hljs-number">0x4024b0</span>(%rdx),%edx<br><span class="hljs-number">0x00000000004010a0</span> &lt;+<span class="hljs-number">62</span>&gt;:    mov    %dl,<span class="hljs-number">0x10</span>(%rsp,%rax,<span class="hljs-number">1</span>)<br><span class="hljs-number">0x00000000004010a4</span> &lt;+<span class="hljs-number">66</span>&gt;:    add    $0x1,%rax<br><span class="hljs-number">0x00000000004010a8</span> &lt;+<span class="hljs-number">70</span>&gt;:    cmp    $0x6,%rax<br><span class="hljs-number">0x00000000004010ac</span> &lt;+<span class="hljs-number">74</span>&gt;:    jne    <span class="hljs-number">0x40108b</span> &lt;phase_5+<span class="hljs-number">41</span>&gt;<br></code></pre></td></tr></table></figure></p><p>程序中提到了0x4024b0这个地址，由于&amp;0xf意味取取其低4位值，因为模式串长度应为16，我们查看这个串.<br><figure class="hljs highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs undefined">(gdb) x /<span class="hljs-number">16</span>c <span class="hljs-number">0</span>x4024b0<br><span class="hljs-number">0</span>x4024b0 &lt;<span class="hljs-keyword">array</span>.<span class="hljs-number">3449</span>&gt;:  <span class="hljs-number">109</span> <span class="hljs-string">'m'</span> <span class="hljs-number">97</span> <span class="hljs-string">'a'</span>  <span class="hljs-number">100</span> <span class="hljs-string">'d'</span> <span class="hljs-number">117</span> <span class="hljs-string">'u'</span> <span class="hljs-number">105</span> <span class="hljs-string">'i'</span> <span class="hljs-number">101</span> <span class="hljs-string">'e'</span> <span class="hljs-number">114</span> <span class="hljs-string">'r'</span> <span class="hljs-number">115</span> <span class="hljs-string">'s'</span><br><span class="hljs-number">0</span>x4024b8 &lt;<span class="hljs-keyword">array</span>.<span class="hljs-number">3449</span>+<span class="hljs-number">8</span>&gt;:        <span class="hljs-number">110</span> <span class="hljs-string">'n'</span> <span class="hljs-number">102</span> <span class="hljs-string">'f'</span> <span class="hljs-number">111</span> <span class="hljs-string">'o'</span> <span class="hljs-number">116</span> <span class="hljs-string">'t'</span> <span class="hljs-number">118</span> <span class="hljs-string">'v'</span> <span class="hljs-number">98</span> <span class="hljs-string">'b'</span>  <span class="hljs-number">121</span> <span class="hljs-string">'y'</span> <span class="hljs-number">108</span> <span class="hljs-string">'l'</span><br></code></pre></td></tr></table></figure></p><p>继续看汇编代码,发现将生成的s与另一个位于0x4025be的字符串进行比较，必须相等.<br><figure class="hljs highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-number">0x00000000004010b3</span> &lt;+<span class="hljs-number">81</span>&gt;:    <span class="hljs-keyword">mov</span>    <span class="hljs-number">$0</span>x40245e,%esi<br><span class="hljs-number">0x00000000004010b8</span> &lt;+<span class="hljs-number">86</span>&gt;:    <span class="hljs-keyword">lea</span>    <span class="hljs-number">0x10</span>(%rsp),%rdi<br><span class="hljs-number">0x00000000004010bd</span> &lt;+<span class="hljs-number">91</span>&gt;:    callq  <span class="hljs-number">0x401338</span> &lt;strings_not_equal&gt;<br><span class="hljs-number">0x00000000004010c2</span> &lt;+<span class="hljs-number">96</span>&gt;:    <span class="hljs-keyword">test</span>   %eax,%eax<br><span class="hljs-number">0x00000000004010c4</span> &lt;+<span class="hljs-number">98</span>&gt;:    <span class="hljs-keyword">je</span>     <span class="hljs-number">0x4010d9</span> &lt;phase_5+<span class="hljs-number">119</span>&gt;<br><span class="hljs-number">0x00000000004010c6</span> &lt;+<span class="hljs-number">100</span>&gt;:   callq  <span class="hljs-number">0x40143a</span> &lt;explode_bomb&gt;<br></code></pre></td></tr></table></figure></p><p>我们查看另一个串,可指其为flyers.<br><figure class="hljs highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-comment">(gdb)</span> x /<span class="hljs-number">6</span>c <span class="hljs-number">0</span>x<span class="hljs-number">40245</span>e<br><span class="hljs-number">0</span>x<span class="hljs-number">40245</span>e:       <span class="hljs-number">102</span> <span class="hljs-string">'f'</span> <span class="hljs-number">108</span> <span class="hljs-string">'l'</span> <span class="hljs-number">121</span> <span class="hljs-string">'y'</span> <span class="hljs-number">101</span> <span class="hljs-string">'e'</span> <span class="hljs-number">114</span> <span class="hljs-string">'r'</span> <span class="hljs-number">115</span> <span class="hljs-string">'s'</span><br></code></pre></td></tr></table></figure></p><p>我们由此反解输入，例如’f’在p中下标为9，低四位1001，查表得低4位位1001的字符又’i’，依次进行，解得一组答案为”ionefg”.</p><h3 id="phase-6"><a href="#phase-6" class="headerlink" title="phase_6"></a>phase_6</h3><p>首先还是<br><figure class="hljs highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-keyword">disas </span>phase_6<br></code></pre></td></tr></table></figure></p><p>从得出代码可以看出，读入了6个数字，且这6个数字互不相等.<br><figure class="hljs highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs undefined">Dump of assembler code <span class="hljs-keyword">for</span> function phase_6:<br><span class="hljs-number">0</span>x00000000004010f4 <span class="hljs-variable">&lt;+0&gt;</span>:     push   %r14<br><span class="hljs-number">0</span>x00000000004010f6 <span class="hljs-variable">&lt;+2&gt;</span>:     push   %r13<br><span class="hljs-number">0</span>x00000000004010f8 <span class="hljs-variable">&lt;+4&gt;</span>:     push   %r12<br><span class="hljs-number">0</span>x00000000004010fa <span class="hljs-variable">&lt;+6&gt;</span>:     push   %rbp<br><span class="hljs-number">0</span>x00000000004010fb <span class="hljs-variable">&lt;+7&gt;</span>:     push   %rbx<br><span class="hljs-number">0</span>x00000000004010fc <span class="hljs-variable">&lt;+8&gt;</span>:     sub    <span class="hljs-variable">$0x50</span>,%rsp<br><span class="hljs-number">0</span>x0000000000401100 <span class="hljs-variable">&lt;+12&gt;</span>:    mov    %rsp,%r13<br><span class="hljs-number">0</span>x0000000000401103 <span class="hljs-variable">&lt;+15&gt;</span>:    mov    %rsp,%rsi<br><span class="hljs-number">0</span>x0000000000401106 <span class="hljs-variable">&lt;+18&gt;</span>:    callq  <span class="hljs-number">0</span>x40145c <span class="hljs-variable">&lt;read_six_numbers&gt;</span><br><span class="hljs-number">0</span>x000000000040110b <span class="hljs-variable">&lt;+23&gt;</span>:    mov    %rsp,%r14<br><span class="hljs-number">0</span>x000000000040110e <span class="hljs-variable">&lt;+26&gt;</span>:    mov    <span class="hljs-variable">$0x0</span>,%r12d<br><span class="hljs-number">0</span>x0000000000401114 <span class="hljs-variable">&lt;+32&gt;</span>:    mov    %r13,%rbp<br><span class="hljs-number">0</span>x0000000000401117 <span class="hljs-variable">&lt;+35&gt;</span>:    mov    <span class="hljs-number">0</span>x0(%r13),%eax<br><span class="hljs-number">0</span>x000000000040111b <span class="hljs-variable">&lt;+39&gt;</span>:    sub    <span class="hljs-variable">$0x1</span>,%eax<br><span class="hljs-number">0</span>x000000000040111e <span class="hljs-variable">&lt;+42&gt;</span>:    cmp    <span class="hljs-variable">$0x5</span>,%eax<br><span class="hljs-number">0</span>x0000000000401121 <span class="hljs-variable">&lt;+45&gt;</span>:    jbe    <span class="hljs-number">0</span>x401128 <span class="hljs-variable">&lt;phase_6+52&gt;</span><br><span class="hljs-number">0</span>x0000000000401123 <span class="hljs-variable">&lt;+47&gt;</span>:    callq  <span class="hljs-number">0</span>x40143a <span class="hljs-variable">&lt;explode_bomb&gt;</span><br><span class="hljs-number">0</span>x0000000000401128 <span class="hljs-variable">&lt;+52&gt;</span>:    add    <span class="hljs-variable">$0x1</span>,%r12d<br><span class="hljs-number">0</span>x000000000040112c <span class="hljs-variable">&lt;+56&gt;</span>:    cmp    <span class="hljs-variable">$0x6</span>,%r12d<br><span class="hljs-number">0</span>x0000000000401130 <span class="hljs-variable">&lt;+60&gt;</span>:    je     <span class="hljs-number">0</span>x401153 <span class="hljs-variable">&lt;phase_6+95&gt;</span><br><span class="hljs-number">0</span>x0000000000401132 <span class="hljs-variable">&lt;+62&gt;</span>:    mov    %r12d,%ebx<br><span class="hljs-number">0</span>x0000000000401135 <span class="hljs-variable">&lt;+65&gt;</span>:    movslq %ebx,%rax<br><span class="hljs-number">0</span>x0000000000401138 <span class="hljs-variable">&lt;+68&gt;</span>:    mov    (%rsp,%rax,<span class="hljs-number">4</span>),%eax<br><span class="hljs-number">0</span>x000000000040113b <span class="hljs-variable">&lt;+71&gt;</span>:    cmp    %eax,<span class="hljs-number">0</span>x0(%rbp)<br><span class="hljs-number">0</span>x000000000040113e <span class="hljs-variable">&lt;+74&gt;</span>:    jne    <span class="hljs-number">0</span>x401145 <span class="hljs-variable">&lt;phase_6+81&gt;</span><br><span class="hljs-number">0</span>x0000000000401140 <span class="hljs-variable">&lt;+76&gt;</span>:    callq  <span class="hljs-number">0</span>x40143a <span class="hljs-variable">&lt;explode_bomb&gt;</span><br><span class="hljs-number">0</span>x0000000000401145 <span class="hljs-variable">&lt;+81&gt;</span>:    add    <span class="hljs-variable">$0x1</span>,%ebx<br><span class="hljs-number">0</span>x0000000000401148 <span class="hljs-variable">&lt;+84&gt;</span>:    cmp    <span class="hljs-variable">$0x5</span>,%ebx<br><span class="hljs-number">0</span>x000000000040114b <span class="hljs-variable">&lt;+87&gt;</span>:    jle    <span class="hljs-number">0</span>x401135 <span class="hljs-variable">&lt;phase_6+65&gt;</span><br><span class="hljs-number">0</span>x000000000040114d <span class="hljs-variable">&lt;+89&gt;</span>:    add    <span class="hljs-variable">$0x4</span>,%r13<br><span class="hljs-number">0</span>x0000000000401151 <span class="hljs-variable">&lt;+93&gt;</span>:    jmp    <span class="hljs-number">0</span>x401114 <span class="hljs-variable">&lt;phase_6+32&gt;</span><br></code></pre></td></tr></table></figure></p><p>由下面代码可以看出，对输入的6个数进行了映射，<figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs input[i]">```<br>    0x000000000040115b &lt;+103&gt;:   mov    $0x7,%ecx<br>    0x0000000000401160 &lt;+108&gt;:   mov    %ecx,%edx<br>    0x0000000000401162 &lt;+110&gt;:   sub    (%rax),%edx<br>    0x0000000000401164 &lt;+112&gt;:   mov    %edx,(%rax)<br>    0x0000000000401166 &lt;+114&gt;:   add    $0x4,%rax<br>    0x000000000040116a &lt;+118&gt;:   cmp    %rsi,%rax<br>    0x000000000040116d &lt;+121&gt;:   jne    0x401160 &lt;phase_6+108&gt;<br></code></pre></td></tr></table></figure></p><p>下面的代码，按照输入的6个数映射后的结果，取链表中对应的元素的6个指针放在一个数组中。<br><figure class="hljs highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-number">0</span>x000000000040116f <span class="hljs-variable">&lt;+123&gt;</span>:   mov    <span class="hljs-variable">$0x0</span>,%esi<br> <span class="hljs-number">0</span>x0000000000401174 <span class="hljs-variable">&lt;+128&gt;</span>:   jmp    <span class="hljs-number">0</span>x401197 <span class="hljs-variable">&lt;phase_6+163&gt;</span><br> <span class="hljs-number">0</span>x0000000000401176 <span class="hljs-variable">&lt;+130&gt;</span>:   mov    <span class="hljs-number">0</span>x8(%rdx),%rdx<br> <span class="hljs-number">0</span>x000000000040117a <span class="hljs-variable">&lt;+134&gt;</span>:   add    <span class="hljs-variable">$0x1</span>,%eax<br> <span class="hljs-number">0</span>x000000000040117d <span class="hljs-variable">&lt;+137&gt;</span>:   cmp    %ecx,%eax<br> <span class="hljs-number">0</span>x000000000040117f <span class="hljs-variable">&lt;+139&gt;</span>:   jne    <span class="hljs-number">0</span>x401176 <span class="hljs-variable">&lt;phase_6+130&gt;</span><br> <span class="hljs-number">0</span>x0000000000401181 <span class="hljs-variable">&lt;+141&gt;</span>:   jmp    <span class="hljs-number">0</span>x401188 <span class="hljs-variable">&lt;phase_6+148&gt;</span><br> <span class="hljs-number">0</span>x0000000000401183 <span class="hljs-variable">&lt;+143&gt;</span>:   mov    <span class="hljs-variable">$0x6032d0</span>,%edx<br> <span class="hljs-number">0</span>x0000000000401188 <span class="hljs-variable">&lt;+148&gt;</span>:   mov    %rdx,<span class="hljs-number">0</span>x20(%rsp,%rsi,<span class="hljs-number">2</span>)<br> <span class="hljs-number">0</span>x000000000040118d <span class="hljs-variable">&lt;+153&gt;</span>:   add    <span class="hljs-variable">$0x4</span>,%rsi<br> <span class="hljs-number">0</span>x0000000000401191 <span class="hljs-variable">&lt;+157&gt;</span>:   cmp    <span class="hljs-variable">$0x18</span>,%rsi<br> <span class="hljs-number">0</span>x0000000000401195 <span class="hljs-variable">&lt;+161&gt;</span>:   je     <span class="hljs-number">0</span>x4011ab <span class="hljs-variable">&lt;phase_6+183&gt;</span><br> <span class="hljs-number">0</span>x0000000000401197 <span class="hljs-variable">&lt;+163&gt;</span>:   mov    (%rsp,%rsi,<span class="hljs-number">1</span>),%ecx<br> <span class="hljs-number">0</span>x000000000040119a <span class="hljs-variable">&lt;+166&gt;</span>:   cmp    <span class="hljs-variable">$0x1</span>,%ecx<br> <span class="hljs-number">0</span>x000000000040119d <span class="hljs-variable">&lt;+169&gt;</span>:   jle    <span class="hljs-number">0</span>x401183 <span class="hljs-variable">&lt;phase_6+143&gt;</span><br> <span class="hljs-number">0</span>x000000000040119f <span class="hljs-variable">&lt;+171&gt;</span>:   mov    <span class="hljs-variable">$0x1</span>,%eax<br> <span class="hljs-number">0</span>x00000000004011a4 <span class="hljs-variable">&lt;+176&gt;</span>:   mov    <span class="hljs-variable">$0x6032d0</span>,%edx<br> <span class="hljs-number">0</span>x00000000004011a9 <span class="hljs-variable">&lt;+181&gt;</span>:   jmp    <span class="hljs-number">0</span>x401176 <span class="hljs-variable">&lt;phase_6+130&gt;</span><br></code></pre></td></tr></table></figure></p><p>该链表头指针为$0x6032d0,查看得知该链表元素为<br><figure class="hljs highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs undefined">(gdb) p /x <span class="hljs-number">0x6032d0</span><br>$<span class="hljs-number">1</span> = <span class="hljs-number">0x6032d0</span><br>(gdb) p /x *<span class="hljs-number">0x6032d0</span><br>$<span class="hljs-number">2</span> = <span class="hljs-number">0x14c</span><br>(gdb) p /x *(<span class="hljs-number">0x6032d0</span> + <span class="hljs-number">8</span>)<br>$<span class="hljs-number">3</span> = <span class="hljs-number">0x6032e0</span><br>(gdb) p /x *(<span class="hljs-number">0x6032e0</span>)<br>$<span class="hljs-number">4</span> = <span class="hljs-number">0xa8</span><br>(gdb) p /x *(<span class="hljs-number">0x6032e0</span> + <span class="hljs-number">8</span>)<br>$<span class="hljs-number">5</span> = <span class="hljs-number">0x6032f0</span><br>(gdb) p /x *(<span class="hljs-number">0x6032f0</span>)<br>$<span class="hljs-number">6</span> = <span class="hljs-number">0x39c</span><br>(gdb) p /x *(<span class="hljs-number">0x6032f0</span> + <span class="hljs-number">8</span>)<br>$<span class="hljs-number">7</span> = <span class="hljs-number">0x603300</span><br>(gdb) p /x *(<span class="hljs-number">0x603300</span>)<br>$<span class="hljs-number">8</span> = <span class="hljs-number">0x2b3</span><br>(gdb) p /x *(<span class="hljs-number">0x603300</span> + <span class="hljs-number">8</span>)<br>$<span class="hljs-number">9</span> = <span class="hljs-number">0x603310</span><br>(gdb) p /x *(<span class="hljs-number">0x603310</span>)<br>$<span class="hljs-number">10</span> = <span class="hljs-number">0x1dd</span><br>(gdb) p /x *(<span class="hljs-number">0x603310</span> + <span class="hljs-number">8</span>)<br>$<span class="hljs-number">11</span> = <span class="hljs-number">0x603320</span><br>(gdb) p /x *(<span class="hljs-number">0x603320</span>)<br>$<span class="hljs-number">12</span> = <span class="hljs-number">0x1bb</span><br>(gdb) p /x *(<span class="hljs-number">0x603320</span> + <span class="hljs-number">8</span>)<br>$<span class="hljs-number">13</span> = <span class="hljs-number">0x0</span><br></code></pre></td></tr></table></figure></p><p>之后的代码中，可以看出，用按顺序选出的节点指针，建立一个新链表，该链表为降序.<br><figure class="hljs highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-number">0x00000000004011ab</span> &lt;+<span class="hljs-number">183</span>&gt;:   <span class="hljs-keyword">mov</span>    <span class="hljs-number">0x20</span>(%rsp),%rbx<br><span class="hljs-number">0x00000000004011b0</span> &lt;+<span class="hljs-number">188</span>&gt;:   <span class="hljs-keyword">lea</span>    <span class="hljs-number">0x28</span>(%rsp),%rax<br><span class="hljs-number">0x00000000004011b5</span> &lt;+<span class="hljs-number">193</span>&gt;:   <span class="hljs-keyword">lea</span>    <span class="hljs-number">0x50</span>(%rsp),%rsi<br><span class="hljs-number">0x00000000004011ba</span> &lt;+<span class="hljs-number">198</span>&gt;:   <span class="hljs-keyword">mov</span>    %rbx,%rcx<br><span class="hljs-number">0x00000000004011bd</span> &lt;+<span class="hljs-number">201</span>&gt;:   <span class="hljs-keyword">mov</span>    (%rax),%rdx<br><span class="hljs-number">0x00000000004011c0</span> &lt;+<span class="hljs-number">204</span>&gt;:   <span class="hljs-keyword">mov</span>    %rdx,<span class="hljs-number">0x8</span>(%rcx)<br><span class="hljs-number">0x00000000004011c4</span> &lt;+<span class="hljs-number">208</span>&gt;:   <span class="hljs-keyword">add</span>    <span class="hljs-number">$0</span>x8,%rax<br><span class="hljs-number">0x00000000004011c8</span> &lt;+<span class="hljs-number">212</span>&gt;:   <span class="hljs-keyword">cmp</span>    %rsi,%rax<br><span class="hljs-number">0x00000000004011cb</span> &lt;+<span class="hljs-number">215</span>&gt;:   <span class="hljs-keyword">je</span>     <span class="hljs-number">0x4011d2</span> &lt;phase_6+<span class="hljs-number">222</span>&gt;<br><span class="hljs-number">0x00000000004011cd</span> &lt;+<span class="hljs-number">217</span>&gt;:   <span class="hljs-keyword">mov</span>    %rdx,%rcx<br><span class="hljs-number">0x00000000004011d0</span> &lt;+<span class="hljs-number">220</span>&gt;:   <span class="hljs-keyword">jmp</span>    <span class="hljs-number">0x4011bd</span> &lt;phase_6+<span class="hljs-number">201</span>&gt;<br><span class="hljs-number">0x00000000004011d2</span> &lt;+<span class="hljs-number">222</span>&gt;:   <span class="hljs-keyword">movq</span>   <span class="hljs-number">$0</span>x0,<span class="hljs-number">0x8</span>(%rdx)<br><span class="hljs-number">0x00000000004011da</span> &lt;+<span class="hljs-number">230</span>&gt;:   <span class="hljs-keyword">mov</span>    <span class="hljs-number">$0</span>x5,%ebp<br><span class="hljs-number">0x00000000004011df</span> &lt;+<span class="hljs-number">235</span>&gt;:   <span class="hljs-keyword">mov</span>    <span class="hljs-number">0x8</span>(%rbx),%rax<br><span class="hljs-number">0x00000000004011e3</span> &lt;+<span class="hljs-number">239</span>&gt;:   <span class="hljs-keyword">mov</span>    (%rax),%eax<br><span class="hljs-number">0x00000000004011e5</span> &lt;+<span class="hljs-number">241</span>&gt;:   <span class="hljs-keyword">cmp</span>    %eax,(%rbx)<br><span class="hljs-number">0x00000000004011e7</span> &lt;+<span class="hljs-number">243</span>&gt;:   <span class="hljs-keyword">jge</span>    <span class="hljs-number">0x4011ee</span> &lt;phase_6+<span class="hljs-number">250</span>&gt;<br><span class="hljs-number">0x00000000004011e9</span> &lt;+<span class="hljs-number">245</span>&gt;:   callq  <span class="hljs-number">0x40143a</span> &lt;explode_bomb&gt;<br><span class="hljs-number">0x00000000004011ee</span> &lt;+<span class="hljs-number">250</span>&gt;:   <span class="hljs-keyword">mov</span>    <span class="hljs-number">0x8</span>(%rbx),%rbx<br><span class="hljs-number">0x00000000004011f2</span> &lt;+<span class="hljs-number">254</span>&gt;:   <span class="hljs-keyword">sub</span>    <span class="hljs-number">$0</span>x1,%ebp<br><span class="hljs-number">0x00000000004011f5</span> &lt;+<span class="hljs-number">257</span>&gt;:   <span class="hljs-keyword">jne</span>    <span class="hljs-number">0x4011df</span> &lt;phase_6+<span class="hljs-number">235</span>&gt;<br></code></pre></td></tr></table></figure></p><p>要使链表为降序，映射后的6个数应该为3，4，5，6，1，2，那么原输入应该为4，3，2，1，6，5</p><p>到此，二进制炸弹的解码就结束了，改实验具有一定的难度，十分考验逻辑推理和汇编理解能力.</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CS:APP </tag>
            
            <tag> 汇编 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CS:APP解题记录</title>
      <link href="/2018/11/08/Csapp%E8%A7%A3%E9%A2%98%E8%AE%B0%E5%BD%951/"/>
      <url>/2018/11/08/Csapp%E8%A7%A3%E9%A2%98%E8%AE%B0%E5%BD%951/</url>
      
        <content type="html"><![CDATA[<h3 id="Csapp-2-60"><a href="#Csapp-2-60" class="headerlink" title="Csapp 2.60"></a>Csapp 2.60</h3><a id="more"></a><figure class="hljs highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">unsigned</span> <span class="hljs-title">replace_byte</span><span class="hljs-params">(<span class="hljs-keyword">unsigned</span> x, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> b)</span><br></span>&#123;<br>    x = x &amp; (~(<span class="hljs-number">0XFF</span> &lt;&lt; (i &lt;&lt; <span class="hljs-number">3</span>)));<span class="hljs-comment">//相应字节置零</span><br>    x = x | (b &lt;&lt; (i &lt;&lt; <span class="hljs-number">3</span>));      <span class="hljs-comment">//相应字节改为char b</span><br>    <span class="hljs-keyword">return</span> x;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span><br></span>&#123;<br>    <span class="hljs-keyword">unsigned</span> ret = replace_byte(<span class="hljs-number">0X12345678</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0XAB</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"0X%X\n"</span>, ret);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><pre><code>0X1234AB78</code></pre><p>利用按位运算$x \&amp; 1 = x$, $b | 0 = b$。</p><h3 id="Csapp-2-65"><a href="#Csapp-2-65" class="headerlink" title="Csapp 2.65"></a>Csapp 2.65</h3><figure class="hljs highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">odd_ones</span><span class="hljs-params">(<span class="hljs-keyword">unsigned</span> x)</span><br></span>&#123;<br>    x ^= x &gt;&gt; <span class="hljs-number">16</span>;<br>    x ^= x &gt;&gt; <span class="hljs-number">8</span>;<br>    x ^= x &gt;&gt; <span class="hljs-number">4</span>;<br>    x ^= x &gt;&gt; <span class="hljs-number">2</span>;<br>    x ^= x &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> x &amp; <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span><br></span>&#123;<br>    <span class="hljs-keyword">int</span> x = odd_ones(<span class="hljs-number">0XB</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>, x);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><pre><code>1</code></pre><p>对32位编码，1亦或所有0仍为1，偶数个1连续亦或结果为0，奇数个1连续亦或结果为1。对32位数，按照右移16，8，4，2，1依次右移使得前后各二分之一编码对齐，亦或结果存在后二分之一编码中，直至亦或总结过存于最低位中，结束，取最低位返回。</p><h3 id="Csapp-2-67"><a href="#Csapp-2-67" class="headerlink" title="Csapp 2.67"></a>Csapp 2.67</h3><h4 id="A-在int为w位的机器中，移位长度不应该超过-w-1-。"><a href="#A-在int为w位的机器中，移位长度不应该超过-w-1-。" class="headerlink" title="A.在int为w位的机器中，移位长度不应该超过$w - 1$。"></a>A.在int为w位的机器中，移位长度不应该超过$w - 1$。</h4><h4 id="B"><a href="#B" class="headerlink" title="B"></a>B</h4><figure class="hljs highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;limits.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">int_size_is_32</span><span class="hljs-params">()</span><br></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">31</span> == INT_MIN;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span><br></span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>, int_size_is_32());<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><pre><code>1</code></pre><p>若int为32位,则$1 &lt;&lt; 31 ==$ INT_MIN.</p><h4 id="C"><a href="#C" class="headerlink" title="C"></a>C</h4><figure class="hljs highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;limits.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">int_size_is_32_for_16</span><span class="hljs-params">()</span><br></span>&#123;<br>    <span class="hljs-keyword">return</span> (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">15</span> != INT_MIN) &amp;&amp; ((<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">31</span>) == INT_MIN);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span><br></span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>, int_size_is_32_for_16());<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><pre><code>1</code></pre><p>当$1 &lt;&lt; 15 !=$ INT_MIN，证明int非16位后，后面即可判断int是否为32位.</p><h3 id="Csapp-2-68"><a href="#Csapp-2-68" class="headerlink" title="Csapp 2.68"></a>Csapp 2.68</h3><figure class="hljs highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">lower_one_mask</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span><br></span>&#123;<br>    <span class="hljs-keyword">return</span> (<span class="hljs-keyword">int</span>)(<span class="hljs-number">0XFFFFFFFF</span>u &gt;&gt; (<span class="hljs-number">32</span> - n));<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span><br></span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"0X%X\n"</span>, lower_one_mask(<span class="hljs-number">6</span>));<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><pre><code>0X3F</code></pre><p>将无符号int最大值右移$(32 - n)$位，进行了逻辑右移，再强制转换为有符号int。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CS:APP </tag>
            
            <tag> 汇编 </tag>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
  
  
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
  
</search>
